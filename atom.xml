<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>alexpdh&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://alexpdh.com/"/>
  <updated>2017-11-11T19:17:23.043Z</updated>
  <id>http://alexpdh.com/</id>
  
  <author>
    <name>alexpdh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解 JVM：Java 内存模型（二）——volatile</title>
    <link href="http://alexpdh.com/2017/11/11/java-memory-model-02/"/>
    <id>http://alexpdh.com/2017/11/11/java-memory-model-02/</id>
    <published>2017-11-11T15:49:24.000Z</published>
    <updated>2017-11-11T19:17:23.043Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>java 内存模型的核心是围绕着在并发过程中如何处理原子性、可见性、有序性这3个特性来展开的，它们是多线程编程的核心。</p></blockquote><ul><li><strong>原子性（Atomicity）：</strong>是指一个操作是不可中断的，即使是多个线程同时执行的情况下，一个操作一旦开始，就不会被其它线程干扰。对于基本类型的读写操作基本都具有原子性的（在32位操作系统中 long 和 double 类型数据的读写不是原子性的，因为它们有64位）。</li><li><strong>可见性（Visibility）：</strong>是指在多线程环境下，当一个线程修改了某一个共享变量的值，其它线程能够立刻知道这个修改。</li><li><strong>有序性（Ordering）：</strong>是指程序的执行顺序是按照代码的先后顺序执行的；对于这句话如果在单线程中所有的操作都是有序的，但是在多线程环境下，一个线程的操作相对于另外一个线程的操作是无序的。</li></ul><a id="more"></a><hr><h3 id="关键字-volatile"><a href="#关键字-volatile" class="headerlink" title="关键字 volatile"></a>关键字 volatile</h3><blockquote><p>volatile 修饰的变量保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。因为当对普通变量进行读写的时候，每个线程先从内存拷贝变量到CPU缓存中。如果计算机有多个CPU，每个线程可能在不同的CPU上被处理，这意味着每个线程可以拷贝到不同的CPU cache中。而volatile修饰的变量，JVM保证了每次读变量都从内存中读，跳过CPU cache这一步。volatile修饰的变量禁止进行指令重排序，所以能在一定程度上保证有序性。只能保证该变量所在的语句还是原来的位置，并不能保证该语句之前或之后的语句是否被打乱。</p></blockquote><h4 id="volatile-的特性"><a href="#volatile-的特性" class="headerlink" title="volatile 的特性"></a>volatile 的特性</h4><ol><li>可见性，当一个变量被 volatile 修饰之后，能保证此变量对所有线程的可见性，即当一个线程修改了这个变量的值，新值对其它线程是立即可见的。</li><li>一定程度上保证有序性，被 volatile 修饰的变量禁止指令重排序，所以能在一定程度上保证有序性。</li><li>对任意单个 volatile 变量的读/写具有原子性，但类似于 volatile++ 这种复合操作不具有原子性。  例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.pdh.test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * volatile 复合操作测试</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span> 2017/11/12</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</div><div class="line"><span class="comment">//申明 volatile 变量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"><span class="comment">//计数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对 volatile 变量复合运算</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">// 启动 10 个线程分别对 i 进行 10000 次计算，正常情况结果为 100000 </span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COUNT; j++) &#123;</div><div class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10000</span>; k++) &#123;</div><div class="line">increase();</div><div class="line">&#125;</div><div class="line">&#125;).start();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 等待所有累加线程全部执行结束，这里不同 ide 中线程存活数不一样，</span></div><div class="line"><span class="comment">// 该示例代码在 idea 中运行，会多出一个 Monitor Ctrl-Break 线程，故条件是 &gt; 2，</span></div><div class="line"><span class="comment">// 如果在 Eclipse 中条件应为 &gt; 1</span></div><div class="line"><span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>) &#123;</div><div class="line">Thread.yield();</div><div class="line">&#125;</div><div class="line">System.out.println(i);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如上代码正常运行结果应该打印100000，但实际结果基本得不到正确结果。这说明了 volatile 变量的复合运算并不具有原子性，想要得到正确结果，需要对 volatile 变量运算操作加锁或者加上同步块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.pdh.test;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * volatile 复合操作测试</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span> 2017/11/12</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</div><div class="line"><span class="comment">//申明 volatile 变量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line"><span class="comment">//计数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对 volatile 变量复合运算，使用 synchronized 同步</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">i++;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">// 启动 10 个线程分别对 i 进行 10000 次计算，正常情况结果为 100000</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; COUNT; j++) &#123;</div><div class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">10000</span>; k++) &#123;</div><div class="line">increase();</div><div class="line">&#125;</div><div class="line">&#125;).start();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 等待所有累加线程全部执行结束，这里不同 ide 中线程存活数不一样，</span></div><div class="line"><span class="comment">// 该示例代码在 idea 中运行，会多出一个 Monitor Ctrl-Break 线程，故条件是 &gt; 2，</span></div><div class="line"><span class="comment">// 如果在 Eclipse 中条件应为 &gt; 1</span></div><div class="line"><span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>) &#123;</div><div class="line">Thread.yield();</div><div class="line">&#125;</div><div class="line">System.out.println(i);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="volatile-适合场景"><a href="#volatile-适合场景" class="headerlink" title="volatile 适合场景"></a>volatile 适合场景</h4><p>volatile适用于不需要保证原子性，但却需要保证可见性的场景。一种典型的使用场景是用它修饰用于停止线程的状态标记，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.pdh.test;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * volatile 复合操作测试</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span> 2017/11/12</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileDemo</span> </span>&#123;</div><div class="line"><span class="comment">//申明 volatile 变量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line"><span class="comment">//计数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用 volatile 变量作为线程结束标志</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line"><span class="keyword">while</span> (!flag) &#123;</div><div class="line">System.out.println(<span class="string">"Thread is running"</span>);</div><div class="line">&#125;</div><div class="line">&#125;).start();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">flag = <span class="keyword">true</span>;</div><div class="line">System.out.println(<span class="string">"Thread is stop"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">VolatileDemo demo = <span class="keyword">new</span> VolatileDemo();</div><div class="line">demo.start();</div><div class="line">Thread.sleep(<span class="number">2000</span>);</div><div class="line">demo.shutdown();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="使用-volatile-的意义"><a href="#使用-volatile-的意义" class="headerlink" title="使用 volatile 的意义"></a>使用 volatile 的意义</h4><p>在某些情况下，volatile 的同步机制性能要优于锁。</p><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">深入理解 Java 虚拟机</span></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;java 内存模型的核心是围绕着在并发过程中如何处理原子性、可见性、有序性这3个特性来展开的，它们是多线程编程的核心。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原子性（Atomicity）：&lt;/strong&gt;是指一个操作是不可中断的，即使是多个线程同时执行的情况下，一个操作一旦开始，就不会被其它线程干扰。对于基本类型的读写操作基本都具有原子性的（在32位操作系统中 long 和 double 类型数据的读写不是原子性的，因为它们有64位）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可见性（Visibility）：&lt;/strong&gt;是指在多线程环境下，当一个线程修改了某一个共享变量的值，其它线程能够立刻知道这个修改。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有序性（Ordering）：&lt;/strong&gt;是指程序的执行顺序是按照代码的先后顺序执行的；对于这句话如果在单线程中所有的操作都是有序的，但是在多线程环境下，一个线程的操作相对于另外一个线程的操作是无序的。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://alexpdh.com/categories/java/"/>
    
    
      <category term="jvm" scheme="http://alexpdh.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>httpclient 调用工具（同时支持 HTTP 和 HTTPS 协议）</title>
    <link href="http://alexpdh.com/2017/10/28/httpclient-tools/"/>
    <id>http://alexpdh.com/2017/10/28/httpclient-tools/</id>
    <published>2017-10-28T05:55:19.000Z</published>
    <updated>2017-10-28T07:00:50.534Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>接口调用是作为后端开发人员在编码过程中的日常，而 HTTP 协议可能是现在 Internet 上使用最多、最重要的协议。虽然在 JDK 的 java net包中已经提供了访问 HTTP 协议的基本功能，但是对于大部分应用程序来说，JDK 库本身提供的功能还不够丰富和灵活。HttpClient 是 Apache Jakarta Common 下的子项目，用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。随着互联网安全性提高，各个互联网公司将自己站点 HTTPS 化，而在调用 HTTPS 协议接口时需要 SSL 证书认证。一般做法是创建一个SSL连接，接受自签名证书的信任策略，使其通过验证。 下面是一个我日常调用接口时使用的 httpclient 调用工具</p></blockquote><a id="more"></a><h3 id="引入-jar-包"><a href="#引入-jar-包" class="headerlink" title="引入 jar 包"></a>引入 jar 包</h3><p>maven 引入 httpclient jar包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><hr><h3 id="HttpClientUtil-java"><a href="#HttpClientUtil-java" class="headerlink" title="HttpClientUtil.java"></a>HttpClientUtil.java</h3><p><strong>httpclient 调用工具类，封装一系列静态入口方法，供其它对象调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.pdh.http;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</div><div class="line"><span class="keyword">import</span> java.nio.charset.UnsupportedCharsetException;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> org.apache.http.Header;</div><div class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</div><div class="line"><span class="keyword">import</span> org.apache.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.apache.http.NameValuePair;</div><div class="line"><span class="keyword">import</span> org.apache.http.ParseException;</div><div class="line"><span class="keyword">import</span> org.apache.http.client.ClientProtocolException;</div><div class="line"><span class="keyword">import</span> org.apache.http.client.config.RequestConfig;</div><div class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</div><div class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</div><div class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</div><div class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</div><div class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpRequestBase;</div><div class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</div><div class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</div><div class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</div><div class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</div><div class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * httpclient 调用工具</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span> 2017/10/28</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientUtil</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 缺省超时时间 单位：ms</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIMEOUT = <span class="number">60000</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 是否重定向标识</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> IS_REDIRECTS = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> String EMPTY_STR = <span class="string">""</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 字符集编码格式</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> String UTF_8 = <span class="string">"UTF-8"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">HttpClientUtil</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 发送 get 请求</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> url 请求地址</div><div class="line"> * <span class="doctag">@return</span> String</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpGetRequest</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</div><div class="line"><span class="keyword">return</span> execute(httpGet);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 发送 get 请求</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> url 请求地址</div><div class="line"> * <span class="doctag">@param</span> headers 头信息</div><div class="line"> * <span class="doctag">@return</span> String</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpGetRequestWithHeaders</span><span class="params">(String url, Map&lt;String, Object&gt; headers)</span> </span>&#123;</div><div class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</div><div class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; param : headers.entrySet()) &#123;</div><div class="line">httpGet.addHeader(param.getKey(), String.valueOf(param.getValue()));</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> execute(httpGet);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 发送 get 请求</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> url 请求地址</div><div class="line"> * <span class="doctag">@param</span> headers 头信息</div><div class="line"> * <span class="doctag">@param</span> params 参数</div><div class="line"> * <span class="doctag">@return</span> String</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpGetRequest</span><span class="params">(String url, Map&lt;String, Object&gt; headers,</span></span></div><div class="line">Map&lt;String, Object&gt; params) &#123;</div><div class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(createParamUrl(url, params));</div><div class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; param : headers.entrySet()) &#123;</div><div class="line">httpGet.addHeader(param.getKey(), String.valueOf(param.getValue()));</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> execute(httpGet);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 发送 get 请求</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> url 请求地址</div><div class="line"> * <span class="doctag">@return</span> String</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpGetRequestWithParams</span><span class="params">(String url, Map&lt;String, Object&gt; params)</span> </span>&#123;</div><div class="line">HttpGet httpGet = <span class="keyword">new</span> HttpGet(createParamUrl(url, params));</div><div class="line"><span class="keyword">return</span> execute(httpGet);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 创建带参数的 URL</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> url 无参URL</div><div class="line"> * <span class="doctag">@param</span> params 参数</div><div class="line"> * <span class="doctag">@return</span> String 带参数URL</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">createParamUrl</span><span class="params">(String url, Map&lt;String, Object&gt; params)</span> </span>&#123;</div><div class="line">Iterator&lt;String&gt; it = params.keySet().iterator();</div><div class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line"><span class="keyword">boolean</span> isIncludeQuestionMark = url.contains(<span class="string">"?"</span>);</div><div class="line"><span class="keyword">if</span> (!isIncludeQuestionMark) &#123;</div><div class="line">sb.append(<span class="string">"?"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</div><div class="line">String key = it.next();</div><div class="line">String value = (String) params.get(key);</div><div class="line">sb.append(<span class="string">"&amp;"</span>);</div><div class="line">sb.append(key);</div><div class="line">sb.append(<span class="string">"="</span>);</div><div class="line">sb.append(value);</div><div class="line">&#125;</div><div class="line">url += sb.toString();</div><div class="line"><span class="keyword">return</span> url;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 发送 post 请求</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> url 请求地址</div><div class="line"> * <span class="doctag">@return</span> String</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpPostRequest</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</div><div class="line"><span class="keyword">return</span> execute(httpPost);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 发送 post 请求</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> url 地址</div><div class="line"> * <span class="doctag">@param</span> params 参数</div><div class="line"> * <span class="doctag">@return</span> String</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpPostRequest</span><span class="params">(String url, Map&lt;String, Object&gt; params)</span> </span>&#123;</div><div class="line">HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</div><div class="line">ArrayList&lt;NameValuePair&gt; pairs = covertParams2NVPS(params);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">httpPost.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(pairs, UTF_8));</div><div class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> execute(httpPost);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 发送 post 请求</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> url 地址</div><div class="line"> * <span class="doctag">@param</span> headers 头信息</div><div class="line"> * <span class="doctag">@param</span> params 参数</div><div class="line"> * <span class="doctag">@return</span> String</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpPostRequest</span><span class="params">(String url, Map&lt;String, Object&gt; headers,</span></span></div><div class="line">Map&lt;String, Object&gt; params) &#123;</div><div class="line">HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</div><div class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; headerParam : headers.entrySet()) &#123;</div><div class="line">httpPost.addHeader(headerParam.getKey(), String.valueOf(headerParam.getValue()));</div><div class="line">&#125;</div><div class="line">ArrayList&lt;NameValuePair&gt; pairs = covertParams2NVPS(params);</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">httpPost.setEntity(<span class="keyword">new</span> UrlEncodedFormEntity(pairs, UTF_8));</div><div class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> execute(httpPost);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 发送 post 请求</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> url 地址</div><div class="line"> * <span class="doctag">@param</span> headers 头信息</div><div class="line"> * <span class="doctag">@param</span> json json 格式参数</div><div class="line"> * <span class="doctag">@return</span> String</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">httpPostRequestByJson</span><span class="params">(String url, Map&lt;String, Object&gt; headers,</span></span></div><div class="line">String json) &#123;</div><div class="line">HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</div><div class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; headerParam : headers.entrySet()) &#123;</div><div class="line">httpPost.addHeader(headerParam.getKey(), String.valueOf(headerParam.getValue()));</div><div class="line">&#125;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">httpPost.setEntity(<span class="keyword">new</span> StringEntity(json, UTF_8));</div><div class="line">&#125; <span class="keyword">catch</span> (UnsupportedCharsetException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> execute(httpPost);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 把参数转换为名值对数组</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> params 参数</div><div class="line"> * <span class="doctag">@return</span> ArrayList&lt;NameValuePair&gt;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;NameValuePair&gt; <span class="title">covertParams2NVPS</span><span class="params">(Map&lt;String, Object&gt; params)</span> </span>&#123;</div><div class="line">ArrayList&lt;NameValuePair&gt; pairs = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</div><div class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; param : params.entrySet()) &#123;</div><div class="line">pairs.add(<span class="keyword">new</span> BasicNameValuePair(param.getKey(), String.valueOf(param.getValue())));</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> pairs;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 执行 HTTP 请求 若重定向返回重定向地址</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> String</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">execute</span><span class="params">(HttpRequestBase request)</span> </span>&#123;</div><div class="line">String result = EMPTY_STR;</div><div class="line">request.setConfig(createConfig(TIMEOUT, IS_REDIRECTS));</div><div class="line">CloseableHttpClient httpClient = getHttpClient();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">CloseableHttpResponse response = httpClient.execute(request);</div><div class="line"><span class="keyword">if</span> (isRedirected(response)) &#123;</div><div class="line">result = getRedirectedUrl(response);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">result = getEntityData(response);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 创建HTTP请求配置</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> timeout 超时时间</div><div class="line"> * <span class="doctag">@param</span> redirectsEnabled 是否开启重定向</div><div class="line"> * <span class="doctag">@return</span> RequestConfig</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> RequestConfig <span class="title">createConfig</span><span class="params">(<span class="keyword">int</span> timeout, <span class="keyword">boolean</span> redirectsEnabled)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> RequestConfig.custom()</div><div class="line"><span class="comment">// 读取数据超时时间（毫秒）</span></div><div class="line">.setSocketTimeout(timeout)</div><div class="line"><span class="comment">// 建立连接超时时间（毫秒）</span></div><div class="line">.setConnectTimeout(timeout)</div><div class="line"><span class="comment">// 从连接池获取连接的等待时间（毫秒）</span></div><div class="line">.setConnectionRequestTimeout(timeout)</div><div class="line"><span class="comment">// 当响应状态码为302时，是否进行重定向</span></div><div class="line">.setRedirectsEnabled(redirectsEnabled)</div><div class="line">.build();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过连接池获取 httpclient</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CloseableHttpClient <span class="title">getHttpClient</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> HttpClients.custom().setConnectionManager(</div><div class="line">HttpConnectionManager.POOLING_CONNECTION_MANAGER).build();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断发送请求是否重定向跳转过</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> response 请求响应</div><div class="line"> * <span class="doctag">@return</span> boolean</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRedirected</span><span class="params">(CloseableHttpResponse response)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> statusCode = response.getStatusLine().getStatusCode();</div><div class="line"><span class="keyword">return</span> statusCode == HttpStatus.SC_MOVED_PERMANENTLY</div><div class="line">|| statusCode == HttpStatus.SC_MOVED_TEMPORARILY;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获得重定向跳转地址</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> response 请求响应</div><div class="line"> * <span class="doctag">@return</span> String 重定向地址</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getRedirectedUrl</span><span class="params">(CloseableHttpResponse response)</span> </span>&#123;</div><div class="line">String result = EMPTY_STR;</div><div class="line">Header[] hs = response.getHeaders(<span class="string">"Location"</span>);</div><div class="line"><span class="keyword">if</span> (hs.length &gt; <span class="number">0</span>) &#123;</div><div class="line">result = hs[<span class="number">0</span>].getValue();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获得响应实体信息</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> response 请求响应</div><div class="line"> * <span class="doctag">@return</span> String 消息实体信息</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getEntityData</span><span class="params">(CloseableHttpResponse response)</span></span></div><div class="line"><span class="keyword">throws</span> ParseException, IOException &#123;</div><div class="line">String result = EMPTY_STR;</div><div class="line">HttpEntity entity = response.getEntity();</div><div class="line"><span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</div><div class="line">result = EntityUtils.toString(entity);</div><div class="line">response.close();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="HttpConnectionManager-java"><a href="#HttpConnectionManager-java" class="headerlink" title="HttpConnectionManager.java"></a>HttpConnectionManager.java</h3><p><strong>httpClient 连接管理器，支持创建普通连接和使用使用连接池</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.migu.barrage.common.http;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.http.config.Registry;</div><div class="line"><span class="keyword">import</span> org.apache.http.config.RegistryBuilder;</div><div class="line"><span class="keyword">import</span> org.apache.http.conn.HttpClientConnectionManager;</div><div class="line"><span class="keyword">import</span> org.apache.http.conn.socket.ConnectionSocketFactory;</div><div class="line"><span class="keyword">import</span> org.apache.http.conn.socket.PlainConnectionSocketFactory;</div><div class="line"><span class="keyword">import</span> org.apache.http.impl.conn.BasicHttpClientConnectionManager;</div><div class="line"><span class="keyword">import</span> org.apache.http.impl.conn.PoolingHttpClientConnectionManager;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * httpClient 连接管理器</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span> 2017/10/28</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConnectionManager</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 普通连接管理器</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> HttpClientConnectionManager BASIC_CONNECTION_MANAGER;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 连接池管理器</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> HttpClientConnectionManager POOLING_CONNECTION_MANAGER;</div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">Registry&lt;ConnectionSocketFactory&gt; r = RegistryBuilder.&lt;ConnectionSocketFactory&gt;create()</div><div class="line">.register(<span class="string">"http"</span>, PlainConnectionSocketFactory.getSocketFactory())</div><div class="line">.register(<span class="string">"https"</span>, SSLSelfSigned.SSL_CONNECTION_SOCKET_FACTORY).build();</div><div class="line"><span class="comment">// 普通连接管理器</span></div><div class="line">BASIC_CONNECTION_MANAGER = <span class="keyword">new</span> BasicHttpClientConnectionManager(r);</div><div class="line"><span class="comment">// 连接池管理器</span></div><div class="line">PoolingHttpClientConnectionManager pooling = <span class="keyword">new</span> PoolingHttpClientConnectionManager(r);</div><div class="line"><span class="comment">// 设置最大连接数</span></div><div class="line">pooling.setMaxTotal(<span class="number">1000</span>);</div><div class="line"><span class="comment">// 设置每个路由基础上的最大连接数</span></div><div class="line">pooling.setDefaultMaxPerRoute(<span class="number">300</span>);</div><div class="line">POOLING_CONNECTION_MANAGER = pooling;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">HttpConnectionManager</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> max httpClient 最大连接数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setMaxTotal</span><span class="params">(<span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">((PoolingHttpClientConnectionManager) POOLING_CONNECTION_MANAGER).setMaxTotal(max);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> max 每个路由基础上的最大连接数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDefaultMaxPerRoute</span><span class="params">(<span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">((PoolingHttpClientConnectionManager) POOLING_CONNECTION_MANAGER).setDefaultMaxPerRoute(max);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="SSLSelfSigned-java"><a href="#SSLSelfSigned-java" class="headerlink" title="SSLSelfSigned.java"></a>SSLSelfSigned.java</h3><p><strong>SSL自签证书</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.pdh.http;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.security.KeyManagementException;</div><div class="line"><span class="keyword">import</span> java.security.KeyStoreException;</div><div class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</div><div class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</div><div class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.NoopHostnameVerifier;</div><div class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</div><div class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.TrustSelfSignedStrategy;</div><div class="line"><span class="keyword">import</span> org.apache.http.ssl.SSLContexts;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 如果 https 使用自签名证书（不是第三方机构颁发的证书），无法通过验证；</div><div class="line"> * 因此需要创建一个SSL连接，接受自签名证书的信任策略，使其通过验证。</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span> 2017/10/28</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSLSelfSigned</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SSLConnectionSocketFactory SSL_CONNECTION_SOCKET_FACTORY;</div><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SSLSelfSigned.class);</div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">SSLContext sslContext = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">sslContext = SSLContexts.custom().loadTrustMaterial(TrustSelfSignedStrategy.INSTANCE).build();</div><div class="line">&#125; <span class="keyword">catch</span> (KeyManagementException e) &#123;</div><div class="line">logger.error(<span class="string">"&#123;&#125;"</span>, e);</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">logger.error(<span class="string">"&#123;&#125;"</span>, e);</div><div class="line">&#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</div><div class="line">logger.error(<span class="string">"&#123;&#125;"</span>, e);</div><div class="line">&#125;</div><div class="line">SSL_CONNECTION_SOCKET_FACTORY = <span class="keyword">new</span> SSLConnectionSocketFactory(sslContext,</div><div class="line">NoopHostnameVerifier.INSTANCE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SSLSelfSigned</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;接口调用是作为后端开发人员在编码过程中的日常，而 HTTP 协议可能是现在 Internet 上使用最多、最重要的协议。虽然在 JDK 的 java net包中已经提供了访问 HTTP 协议的基本功能，但是对于大部分应用程序来说，JDK 库本身提供的功能还不够丰富和灵活。HttpClient 是 Apache Jakarta Common 下的子项目，用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持HTTP协议最新的版本和建议。随着互联网安全性提高，各个互联网公司将自己站点 HTTPS 化，而在调用 HTTPS 协议接口时需要 SSL 证书认证。一般做法是创建一个SSL连接，接受自签名证书的信任策略，使其通过验证。 下面是一个我日常调用接口时使用的 httpclient 调用工具&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://alexpdh.com/categories/java/"/>
    
    
      <category term="java" scheme="http://alexpdh.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>windows 环境下 vagrant 安装配置</title>
    <link href="http://alexpdh.com/2017/10/11/vagrant-install-configure/"/>
    <id>http://alexpdh.com/2017/10/11/vagrant-install-configure/</id>
    <published>2017-10-11T08:08:58.000Z</published>
    <updated>2017-10-11T13:38:41.852Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ojirj5wkr.bkt.clouddn.com/vagrant02.jpg" alt="vagrant02.jpg"></p><h4 id="vagrant-介绍"><a href="#vagrant-介绍" class="headerlink" title="vagrant 介绍"></a>vagrant 介绍</h4><blockquote><p>vagrant 是一个虚拟机运行环境管理工具，通过它我们可以快速的通过命令搭建一个比较完善的开发环境，其本身并不是虚拟机。我们经常使用的虚拟机有 VirtualBox、VMware 等。</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h4 id="环境和软件准备"><a href="#环境和软件准备" class="headerlink" title="环境和软件准备"></a>环境和软件准备</h4><ul><li>Windows 7 旗舰版</li><li>vagrant_2.0.0_x86_64.msi</li><li>VirtualBox-5.1.28-117968-Win.exe</li></ul><hr><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><h5 id="VirtualBox-下载"><a href="#VirtualBox-下载" class="headerlink" title="VirtualBox 下载"></a>VirtualBox 下载</h5><p>到 VirtualBox 官网 <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">https://www.virtualbox.org/wiki/Downloads</a> 下载安装包。</p><h5 id="vagrant-下载"><a href="#vagrant-下载" class="headerlink" title="vagrant 下载"></a>vagrant 下载</h5><p>到 vagrant 官网 <a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="external">https://www.vagrantup.com/downloads.html</a> 下载安装包，如果没有翻墙的话最好移步到我分享的百度云下载 <a href="http://pan.baidu.com/s/1pLp4hfX" target="_blank" rel="external">链接：http://pan.baidu.com/s/1pLp4hfX</a> 密码：swky 。</p><h5 id="镜像文件下载"><a href="#镜像文件下载" class="headerlink" title="镜像文件下载"></a>镜像文件下载</h5><p>vagrant 官网提供了很多镜像文件包，<a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="external">https://app.vagrantup.com/boxes/search</a>，可以通过两种方式下载镜像，一种是直接使用命令从互联网上下载，另一种通过加装本地镜像文件来安装。这里使用第二种方式。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ol><li>首先我们安装了 VirtualBox 完成之后，打开 VirtualBox 使用快捷键 Ctrl + G 打开“全局设置”，选择 常规 里的 默认虚拟电脑位置，设置为非系统盘的位置。</li><li>安装了 vagrant 完成之后，vagrant 会默认设置虚拟机模板镜像文件存放在c:\User\<username>.Vagrant.d里，当使用Vagrant管理的虚拟机模板镜像较多时，这个目录也是比较大的，需要将这个目录放到其它磁盘上。添加环境变量：VAGRANT_HOME，值设置如：D:\vagrant-projects.vagrant.d</username></li><li>新建目录，如：D:\vagrant-projects，用来管理虚拟机。</li><li>下载镜像文件到本地，我们可以通过如下图方式获取到镜像文件下载的地址，以 centos/7 为例：<img src="http://ojirj5wkr.bkt.clouddn.com/vagrant01.jpg" alt="vagrant01.jpg">，将链接复制到浏览器手动下载。这样在浏览器里下载断了也可以续。</li><li>在 vagrant-projects 目录下新建 centos7 目录，用于存放 centos/7 文件位置。</li><li>使用命令：vagrant box add {title} {url} 加载镜像文件，其中 title 自己定义取名，url 为镜像文件位置，如：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">D:\vagrant-projects\centos7&gt;vagrant box add centos7-11 D:\vagrant-projects\virtu</div><div class="line">albox\CentOS-7-x86_64-Vagrant-1708_01.VirtualBox.box</div><div class="line">==&gt; box: Box file was not detected as metadata. Adding it directly...</div><div class="line">==&gt; box: Adding box <span class="string">'centos7-11'</span> (v0) <span class="keyword">for</span> provider:</div><div class="line">    box: Unpacking necessary files from: file:///D:/vagrant-projects/virtualbox/</div><div class="line">CentOS-7-x86_64-Vagrant-1708_01.VirtualBox.box</div><div class="line">    box: Progress: 100% (Rate: 47.8M/s, Estimated time remaining: --:--:--)</div><div class="line">==&gt; box: Successfully added box <span class="string">'centos7-11'</span> (v0) <span class="keyword">for</span> <span class="string">'virtualbox'</span>!</div></pre></td></tr></table></figure><ol><li>使用 vagrant init centos7-11 命令初始化虚拟机，执行完之后，发现 centos7 目录下多了个配置文件 Vagrantfile。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">D:\vagrant-projects\centos7&gt;vagrant init centos7-11</div><div class="line">A `Vagrantfile` has been placed <span class="keyword">in</span> this directory. You are now</div><div class="line">ready to `vagrant up` your first virtual environment! Please <span class="built_in">read</span></div><div class="line">the comments <span class="keyword">in</span> the Vagrantfile as well as documentation on</div><div class="line">`vagrantup.com` <span class="keyword">for</span> more information on using Vagrant.</div></pre></td></tr></table></figure><ol><li>编辑 Vagrantfile 文件，将对应的注释取消掉，自定义一些配置。</li></ol><p><strong>配置说明</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#配置主机名，进入操作系统执行 hostname 显示的名字，我用的规则是 系统版本-IP</span></div><div class="line"></div><div class="line"><span class="comment">#配置端口映射，通过访问本机的 8080 端口，访问安装后虚拟机的 80 端口</span></div><div class="line">config.vm.network <span class="string">"forwarded_port"</span>, guest: 80, host: 8080</div><div class="line"><span class="comment">#配置虚拟机的 ip，默认网卡一是 NAT 方式，不需要配置</span></div><div class="line"><span class="comment">#这里创建网卡二 Host-Only，对应 VirtualBox 的 vbox0</span></div><div class="line">config.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"211.168.33.11"</span></div><div class="line"><span class="comment">#配置共享文件夹目录，进入系统后，自动挂载 /data</span></div><div class="line">config.vm.synced_folder <span class="string">"/vagrant-work"</span>, <span class="string">"/data"</span><span class="string">"</span></div><div class="line">#VirtualBox 的配置</div><div class="line">config.vm.provider "virtualbox<span class="string">" do |vb|</span></div><div class="line">#这里配置显示在 VirtualBox 的名字，要不然是默认的一长串字符，太丑了</div><div class="line">  vb.name = "centos7-11<span class="string">"</span></div><div class="line">#  </div><div class="line">#Display the VirtualBox GUI when booting the machine</div><div class="line">  vb.gui = false</div><div class="line">#Customize the amount of memory on the VM:</div><div class="line">  vb.memory = "1024<span class="string">"</span></div><div class="line">  vb.cpus = "2<span class="string">"</span></div></pre></td></tr></table></figure><p><strong>Vagrantfile 示例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment"># -*- mode: ruby -*-</span></div><div class="line"><span class="comment"># vi: set ft=ruby :</span></div><div class="line"></div><div class="line"><span class="comment"># All Vagrant configuration is done below. The "2" in Vagrant.configure</span></div><div class="line"><span class="comment"># configures the configuration version (we support older styles for</span></div><div class="line"><span class="comment"># backwards compatibility). Please don't change it unless you know what</span></div><div class="line"><span class="comment"># you're doing.</span></div><div class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</div><div class="line">  <span class="comment"># The most common configuration options are documented and commented below.</span></div><div class="line">  <span class="comment"># For a complete reference, please see the online documentation at</span></div><div class="line">  <span class="comment"># https://docs.vagrantup.com.</span></div><div class="line"></div><div class="line">  <span class="comment"># Every Vagrant development environment requires a box. You can search for</span></div><div class="line">  <span class="comment"># boxes at https://vagrantcloud.com/search.</span></div><div class="line">  config.vm.box = <span class="string">"centos7-11"</span></div><div class="line">  config.vm.hostname = <span class="string">"centos7-11"</span></div><div class="line">  <span class="comment"># config.ssh.username = "vagrant"</span></div><div class="line">  <span class="comment"># config.ssh.password = "vagrant"</span></div><div class="line"></div><div class="line">  <span class="comment"># Disable automatic box update checking. If you disable this, then</span></div><div class="line">  <span class="comment"># boxes will only be checked for updates when the user runs</span></div><div class="line">  <span class="comment"># `vagrant box outdated`. This is not recommended.</span></div><div class="line">  <span class="comment"># config.vm.box_check_update = false</span></div><div class="line"></div><div class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></div><div class="line">  <span class="comment"># within the machine from a port on the host machine. In the example below,</span></div><div class="line">  <span class="comment"># accessing "localhost:8080" will access port 80 on the guest machine.</span></div><div class="line">  <span class="comment"># <span class="doctag">NOTE:</span> This will enable public access to the opened port</span></div><div class="line">   config.vm.network <span class="string">"forwarded_port"</span>, guest: 80, host: 8080</div><div class="line"></div><div class="line">  <span class="comment"># Create a forwarded port mapping which allows access to a specific port</span></div><div class="line">  <span class="comment"># within the machine from a port on the host machine and only allow access</span></div><div class="line">  <span class="comment"># via 127.0.0.1 to disable public access</span></div><div class="line">  <span class="comment"># config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"</span></div><div class="line"></div><div class="line">  <span class="comment"># Create a private network, which allows host-only access to the machine</span></div><div class="line">  <span class="comment"># using a specific IP.</span></div><div class="line">   config.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"211.168.33.11"</span></div><div class="line"></div><div class="line">  <span class="comment"># Create a public network, which generally matched to bridged network.</span></div><div class="line">  <span class="comment"># Bridged networks make the machine appear as another physical device on</span></div><div class="line">  <span class="comment"># your network.</span></div><div class="line">  <span class="comment"># config.vm.network "public_network"</span></div><div class="line"></div><div class="line">  <span class="comment"># Share an additional folder to the guest VM. The first argument is</span></div><div class="line">  <span class="comment"># the path on the host to the actual folder. The second argument is</span></div><div class="line">  <span class="comment"># the path on the guest to mount the folder. And the optional third</span></div><div class="line">  <span class="comment"># argument is a set of non-required options.</span></div><div class="line">   config.vm.synced_folder <span class="string">"/vagrant-work"</span>, <span class="string">"/data"</span></div><div class="line"></div><div class="line">  <span class="comment"># Provider-specific configuration so you can fine-tune various</span></div><div class="line">  <span class="comment"># backing providers for Vagrant. These expose provider-specific options.</span></div><div class="line">  <span class="comment"># Example for VirtualBox:</span></div><div class="line">  <span class="comment">#</span></div><div class="line">   config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |vb|</div><div class="line">   vb.name = <span class="string">"centos7-11"</span></div><div class="line">  <span class="comment">#   # Display the VirtualBox GUI when booting the machine</span></div><div class="line">     vb.gui = <span class="literal">true</span></div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment">#   # Customize the amount of memory on the VM:</span></div><div class="line">     vb.memory = <span class="string">"1024"</span></div><div class="line"> vb.cpus = <span class="string">"2"</span></div><div class="line">   end</div><div class="line">  <span class="comment">#</span></div><div class="line">  <span class="comment"># View the documentation for the provider you are using for more</span></div><div class="line">  <span class="comment"># information on available options.</span></div><div class="line"></div><div class="line">  <span class="comment"># Enable provisioning with a shell script. Additional provisioners such as</span></div><div class="line">  <span class="comment"># Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the</span></div><div class="line">  <span class="comment"># documentation for more information about their specific syntax and use.</span></div><div class="line">  <span class="comment"># config.vm.provision "shell", inline: &lt;&lt;-SHELL</span></div><div class="line">  <span class="comment">#   apt-get update</span></div><div class="line">  <span class="comment">#   apt-get install -y apache2</span></div><div class="line">  <span class="comment"># SHELL</span></div><div class="line">end</div></pre></td></tr></table></figure><ol><li>使用 vagrant up –provider virtualbox 命令启动虚拟机</li><li>启动之后使用 vagrant ssh 登录虚拟机。</li></ol><h4 id="vagrant-常用命令"><a href="#vagrant-常用命令" class="headerlink" title="vagrant 常用命令"></a>vagrant 常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">vagrant box add 添加box的操作</div><div class="line"></div><div class="line">vagrant init 初始化box的操作</div><div class="line"></div><div class="line">vagrant up 启动虚拟机的操作</div><div class="line"></div><div class="line">vagrant ssh 登录拟机的操作</div><div class="line"></div><div class="line">vagrant status 查看当前文件夹下虚拟机状态</div><div class="line"></div><div class="line">vagrant ssh-config 输出用于ssh连接的一些信息</div><div class="line"></div><div class="line">vagrant halt 强制关机</div><div class="line"></div><div class="line">vagrant reload 重新启动虚拟机，主要用于重新载入配置文件</div><div class="line"></div><div class="line">vagrant resume 恢复前面被挂起的状态</div><div class="line"></div><div class="line">vagrant <span class="built_in">suspend</span> 挂起当前的虚拟机</div><div class="line"></div><div class="line">vagrant box list 显示当前已经添加的box列表</div><div class="line"></div><div class="line">vagrant box remove 删除相应的box</div></pre></td></tr></table></figure><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><a href="http://www.cnblogs.com/vishun/archive/2017/06/02/6932454.html" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.cnblogs.com/vishun/archive/2017/06/02/6932454.html</span></a></li><li><a href="https://favoorr.github.io/2017/01/05/programming-road-environment/" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">https://favoorr.github.io/2017/01/05/programming-road-environment/</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/vagrant02.jpg&quot; alt=&quot;vagrant02.jpg&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;vagrant-介绍&quot;&gt;&lt;a href=&quot;#vagrant-介绍&quot; class=&quot;headerlink&quot; title=&quot;vagrant 介绍&quot;&gt;&lt;/a&gt;vagrant 介绍&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;vagrant 是一个虚拟机运行环境管理工具，通过它我们可以快速的通过命令搭建一个比较完善的开发环境，其本身并不是虚拟机。我们经常使用的虚拟机有 VirtualBox、VMware 等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="vagrant" scheme="http://alexpdh.com/categories/vagrant/"/>
    
    
      <category term="vagrant" scheme="http://alexpdh.com/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>理解 JVM：Java 内存模型（一）——基础</title>
    <link href="http://alexpdh.com/2017/09/17/java-memory-model-01/"/>
    <id>http://alexpdh.com/2017/09/17/java-memory-model-01/</id>
    <published>2017-09-17T12:32:17.000Z</published>
    <updated>2017-11-11T15:45:49.480Z</updated>
    
    <content type="html"><![CDATA[<h3 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h3><p><strong>并发：</strong>指同时发生，在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但任一个时刻点上只有一个程序在处理机上运行。</p><ul><li>在并发编程中需要处理两个关键问题：线程之间如何通信及线程之间如何同步。<ol><li>通信：是指线程之间如何交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。</li><li>同步：是指程序用于控制不同线程之间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。在 Java 中，可以通过 volatile，synchronized, 锁等方式实现同步。 </li></ol></li></ul><a id="more"></a><hr><h3 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h3><p>Java的并发采用的是共享内存模型，Java线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。Java 虚拟机规范中试图定义一种 Java 内存模型（Java Model Memory，JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。</p><h4 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h4><p>Java 内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。此处的变量（Variables）与 Java 编程中所说的变量有所区别，它包括了实例字段、静态字段和构成数组对象的元素，但不包括局部变量与方法参数，因为后者是线程私有的，不会被共享，自然不会存在竞争问题。</p><p>Java 内存模型规定了所有的变量都存储在主内存（Main Memory）中，每条线程还有自己的工作内存（Working Memory），线程的工作内存中保存被该线程使用到的变量在主内存中变量的副本，线程对变量的多有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量的值得传递均需要通过主内存来完成，线程、主内存、工作内存三者的交互关系如图所示：</p><p><img src="http://ojirj5wkr.bkt.clouddn.com/image/hexo/java-memory-model.jpg" alt="java-memory-model.jpg"></p><p>这里所讲的主内存、工作内存与 Java 内存区域中的 Java 堆、栈、方法区等并不是同一个层次的内存划分，这两者基本上没有关系，如果两者一定要勉强对应起来，那从变量、主内存、工作内存的定义来看，主内存主要对应于 Java 堆中的对象实例数据部分，而工作内存则对应于虚拟机栈中的部分区域。从更低层次上说，主内存就直接对应于物理硬件内存，而为了获取更好的运行速度，虚拟机可能会让工作内存优先存储于寄存器和高速缓存中，因为程序运行时注意访问读写的是工作内存。</p><h4 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h4><p>Java 内存模型定义了 8 种操作来完成主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步会主内存的。虚拟机是现实必须要保证下面提及的每一种操作都是原子的、不可再分的。</p><ol><li>lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。</li><li>unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其它线程锁定。</li><li>read（读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的 load 动作使用。</li><li>load（载入）：作用于工作内存的变量，它把 read 操作从主内存中得到的变量植入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li>store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的 write 操作使用。</li><li>write（写入）：作用于主内存的变量，它把 store 操作从工作内存得到的变量的值放入主内存的变量中。</li></ol><p>Java 内存模型还规定了在执行上述 8 种基本操作是必须满足如下规则：</p><ul><li>如果把一个变量从主内存复制到工作内存，那就要顺序地执行 read 和 load 操作。</li><li>如果把一个变量从工作内存同步回主内存，那就要顺序地执行 store 和 write 操作。</li><li>不允许 read 和 load、store 和 write 操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。</li><li>不允许一个线程丢弃它的最近的 assign 操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。</li><li>不允许一个线程无原因地（没有发生任何 assign 操作）把数据从线程的工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load 和 assign）的变量，换句话说，就是对一个变量实施 use、store 操作之前，必须先执行过了 assign 和 load 操作。</li><li>一个变量在同一个时刻只允许一个线程对其进行 lock 操作，但 lock 操作可以被同一条线程重复执行多次，多次执行 lock 后，只有执行相同次数的 unlock 操作，变量才会被解锁。</li><li>如果对一个变量执行 lock 操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行 load 或 assign 操作初始化变量的值。</li><li>对一个变量执行 unlock 操作之前，必须先把此变量同步回主内存中（执行 store、write 操作）。</li></ul><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">深入理解 Java 虚拟机</span></li><li><a href="http://www.infoq.com/cn/articles/java-memory-model-1" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.infoq.com/cn/articles/java-memory-model-1</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;并发编程&quot;&gt;&lt;a href=&quot;#并发编程&quot; class=&quot;headerlink&quot; title=&quot;并发编程&quot;&gt;&lt;/a&gt;并发编程&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;并发：&lt;/strong&gt;指同时发生，在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理机上运行，但任一个时刻点上只有一个程序在处理机上运行。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在并发编程中需要处理两个关键问题：线程之间如何通信及线程之间如何同步。&lt;ol&gt;
&lt;li&gt;通信：是指线程之间如何交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。&lt;/li&gt;
&lt;li&gt;同步：是指程序用于控制不同线程之间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。在 Java 中，可以通过 volatile，synchronized, 锁等方式实现同步。 &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://alexpdh.com/categories/java/"/>
    
    
      <category term="jvm" scheme="http://alexpdh.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>理解 JVM：JVM 内存模型</title>
    <link href="http://alexpdh.com/2017/09/16/jvm-memory/"/>
    <id>http://alexpdh.com/2017/09/16/jvm-memory/</id>
    <published>2017-09-16T10:41:41.000Z</published>
    <updated>2017-09-26T09:51:40.855Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Java 虚拟机在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域，这些区域都有各自的用途，以及创建和销毁的时间。有的区域随着虚拟机进程的启动就存在了， 有的区域则是依赖用户线程。根据《Java虚拟机规范（第二版）》，Java 虚拟机所管理的内存包含以下的几个区域。</p></blockquote><p><img src="http://ojirj5wkr.bkt.clouddn.com/image/hexo/java-memory.jpg" alt="java-memory.jpg"></p><a id="more"></a><hr><h3 id="运行时数据区（Runtime-Data-Area）"><a href="#运行时数据区（Runtime-Data-Area）" class="headerlink" title="运行时数据区（Runtime Data Area）"></a>运行时数据区（Runtime Data Area）</h3><blockquote><p>由上图可以看出，在运行时数据区中：虚拟机栈、本地方法栈、程序计数器属于<span style="color:red;font-size:16px;font-style:oblique;">线程隔离的数据区，是单个线程私有的，它们的生命周期与线程相同</span>；而方法区和堆属于<span style="color:red;font-size:16px;font-style:oblique;">所有线程共享的数据区，是所有线程共享的</span>。</p></blockquote><hr><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>程序计数器（Program Counter Register）是最小的一块内存区域，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取吓一跳需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。在多线程环境下，当某个线程失去处理器执行权时，需要记录该线程被切换出去时所执行的程序位置。从而方便该线程被切换回来(重新被处理器处理)时能恢复到当初的执行位置，因此每个线程都需要有一个独立的程序计数器。各个线程的程序计数器互不影响，并且独立存储。</p><ol><li>如果线程正在执行一个 java 方法时，这个程序计数器记录的时正在执行的虚拟机字节码指令的地址；</li><li>如果正在执行的是 Native 方法，这个计数器的值则为空（Undefined）；</li><li>此内存区域是唯一一个在 java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。</li></ol><hr><h4 id="Java-虚拟机栈"><a href="#Java-虚拟机栈" class="headerlink" title="Java 虚拟机栈"></a>Java 虚拟机栈</h4><p>Java 虚拟机栈（Java Virtual Machine Stack）也是线程私有的，它的生命周期与线程相同。Java 虚拟机栈描述的是 Java 方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每个方法从调用直至执行完成的过程，对应着一个栈帧在虚拟机中入栈到进栈的过程。</p><p>局部变量表存放了编译期克制的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其它与此对象相关的位置）和 returnAddress 类型（指向了一条字节码指令的地址）。其中 64 位长度的 long 和 double 类型的数据会占用 2 个局部变量表空间（Slot），其余的数据类型只占 1 个。局部变量所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定了的，在方法运行期间不会改变局部变量表的大小。</p><p>在 Java 虚拟机规范中，对这个区域规定了两种异常状况：</p><ol><li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 StackOverflowError 异常；</li><li>如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出 OutOfMemoryError 异常。</li></ol><hr><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>本地方法栈（Native Method Stack）虚拟机栈所发挥的作用是非常相似的，它们的区别不过是虚拟机栈为虚拟机执行 Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的 Native 方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如 Sun HotSpot 虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出 StackOverflowError 和 OutOfMemoryError 异常。</p><hr><h4 id="Java-堆"><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h4><p>也叫做java 堆（Java Heap）、GC 堆（Garbage Collected Heap）是 java 虚拟机所管理的内存中最大的一块内存区域，也是被各个线程共享的内存区域，在 JVM 启动时创建。该内存区域存放了对象实例及数组(所有 new 的对象)。其大小通过 -Xms(最小值)和 -Xmx(最大值)参数设置，-Xms 为 JVM启动时申请的最小内存，默认为操作系统物理内存的 1/64 但小于 1G，-Xmx 为 JVM 可申请的最大内存，默认为物理内存的 1/4 但小于 1G，默认当空余堆内存小于 40% 时，JVM 会增大 Heap 到 -Xmx指定的大小，可通过 -XX:MinHeapFreeRation= 来指定这个比列；当空余堆内存大于 70% 时，JVM 会减小 heap 的大小到 -Xms 指定的大小，可通过 XX:MaxHeapFreeRation= 来指定这个比列，对于运行系统，为避免在运行时频繁调整 Heap 的大小，通常 -Xms 与 -Xmx 的值设成一样。</p><p>Java 堆是垃圾收集器管理的主要区域，从内存回收的角度来看，由于现在收集器基本是采用分代收集算法，堆被划分为新生代和老年代。新生代主要存储新创建的对象和尚未进入老年代的对象。老年代存储经过多次新生代 GC(Minor GC) 任然存活的对象。</p><ol><li>新生代： 程序新创建的对象都是从新生代分配内存，新生代由 Eden Space 和两块相同大小的Survivor Space(通常又称 S0 和 S1 或 From 和 To)构成，在 Sun HotSpot 虚拟机中 Eden 和 Survivor 的大小比例是 8:1，也就是每次新生代中可用内存空间为整个新生代容量的 90%（80% + 10%），可通过 -Xmn 参数来指定新生代的大小，也可以通过 -XX:SurvivorRation 来调整 Eden Space 及 Survivor Space 的大小。 </li><li>老年代： 用于存放经过多次新生代 GC 任然存活的对象，例如缓存对象，新建的对象也有可能直接进入老年代，主要有两种情况：1、大对象，可通过启动参数设置 -XX:PretenureSizeThreshold=1024(单位为字节，默认为0)来代表超过多大时就不在新生代分配，而是直接在老年代分配。2、大的数组对象，切数组中无引用外部对象。 老年代所占的内存大小为 -Xmx 对应的值减去 -Xmn 对应的值。</li></ol><p><img src="http://ojirj5wkr.bkt.clouddn.com/image/hexo/java-heap.jpg" alt="java-heap.jpg"></p><ul><li>Young Generation 即图中的 Eden + From Space + To Space<ul><li>Eden 存放新生的对象</li><li>Survivor Space 有两个，存放每次垃圾回收后存活的对象</li></ul></li><li>Old Generation Tenured Generation 即图中的 Old Space 主要存放应用程序中生命周期长的存活对象。</li></ul><hr><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>方法区（Method Area）与 Java 堆一样，是各个线程共享的内存区域，它用于内存已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆）。对于 HotSpot 虚拟机，也把方法区成为“永久代”（Permanent Generation），默认最小值为16MB，最大值为64MB，可以通过 -XX:PermSize 和 -XX:MaxPermSize 参数限制方法区的大小。在 JDK 1.7 以后已经逐步改为采用 Native Memory 来实现方法区。当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。</p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中处了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译器生成的各种符号引用，这部分内容将在类加载后放到方法区的运行时常量池中。当常量池无法再申请到内存时会抛出 OutOfMemoryError 异常。对于 HotSpot 虚拟机，在 JDK 1.7 中，已经把原本放在永久代的字符串常量池移除。</p><hr><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是 Java 虚拟机规范中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致 OutOfMemoryError 异常。jdk1.4 中新加入的NIO，引入了通道与缓冲区的IO方式，它可以调用Native方法直接分配堆外内存，这个堆外内存就是本机内存，不会影响到堆内存的大小。</p><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">深入理解 Java 虚拟机</span></li><li><a href="http://www.hollischuang.com/archives/80" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.hollischuang.com/archives/80</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Java 虚拟机在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域，这些区域都有各自的用途，以及创建和销毁的时间。有的区域随着虚拟机进程的启动就存在了， 有的区域则是依赖用户线程。根据《Java虚拟机规范（第二版）》，Java 虚拟机所管理的内存包含以下的几个区域。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/image/hexo/java-memory.jpg&quot; alt=&quot;java-memory.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://alexpdh.com/categories/java/"/>
    
    
      <category term="jvm" scheme="http://alexpdh.com/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 集成 socket.io 后端实现消息实时通信</title>
    <link href="http://alexpdh.com/2017/09/03/springboot-socketio/"/>
    <id>http://alexpdh.com/2017/09/03/springboot-socketio/</id>
    <published>2017-09-02T16:18:34.000Z</published>
    <updated>2017-09-26T09:51:40.894Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ojirj5wkr.bkt.clouddn.com/image/springboot/socketio.jpg" alt="socketio.jpg"></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>基于 socket.io 来说，采用 node 实现更加合适，本文使用两个后端的开源框架实现，服务端使用 <a href="https://github.com/mrniko/netty-socketio" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">netty-socketio</span></a> ，客户端使用 <a href="https://github.com/socketio/socket.io-client" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">socket.io-client</span></a>。使用 Scheduledexecutorservice 实现消息可配置任务调度。</p></blockquote><a id="more"></a><hr><h3 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a>socket.io</h3><p><strong>socket.io：</strong>是一个面向实时 web 应用的 JavaScript 库。它使得服务器和客户端之间实时双向的通信成为可能。他有两个部分：在浏览器中运行的客户端库，和一个面向Node.js的服务端库。两者有着几乎一样的API。像Node.js一样，它也是事件驱动的.</p><blockquote><p>Socket.IO 主要使用WebSocket协议。但是如果需要的话，Socket.io可以回退到几种其它方法，例如Adobe Flash Sockets，JSONP拉取，或是传统的AJAX拉取，[2]并且在同时提供完全相同的接口。尽管它可以被用作WebSocket的包装库，它还是提供了许多其它功能，比如广播至多个套接字，存储与不同客户有关的数据，和异步IO操作。</p></blockquote><hr><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><h4 id="引入依赖包"><a href="#引入依赖包" class="headerlink" title="引入依赖包"></a>引入依赖包</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;io.socket&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;socket.io-client&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;1.0.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;com.corundumstudio.socketio&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;netty-socketio&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;1.7.12&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><h4 id="创建服务端类-SocketServer"><a href="#创建服务端类-SocketServer" class="headerlink" title="创建服务端类 SocketServer"></a>创建服务端类 SocketServer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.socket.socketio;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.corundumstudio.socketio.AckRequest;</div><div class="line"><span class="keyword">import</span> com.corundumstudio.socketio.Configuration;</div><div class="line"><span class="keyword">import</span> com.corundumstudio.socketio.SocketIOClient;</div><div class="line"><span class="keyword">import</span> com.corundumstudio.socketio.SocketIOServer;</div><div class="line"><span class="keyword">import</span> com.corundumstudio.socketio.listener.ConnectListener;</div><div class="line"><span class="keyword">import</span> com.corundumstudio.socketio.listener.DataListener;</div><div class="line"><span class="keyword">import</span> com.corundumstudio.socketio.listener.DisconnectListener;</div><div class="line"><span class="keyword">import</span> com.socket.domain.TimeMessage;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * socketio 服务端</div><div class="line"> *netty-socketio 实现的 socke.io 服务端</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-09-03 1:13</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> SocketIOServer server = initServer();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化服务端</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SocketIOServer <span class="title">initServer</span><span class="params">()</span> </span>&#123;</div><div class="line">Configuration config = <span class="keyword">new</span> Configuration();</div><div class="line">config.setHostname(<span class="string">"localhost"</span>);</div><div class="line">config.setPort(<span class="number">9090</span>);</div><div class="line">server = <span class="keyword">new</span> SocketIOServer(config);</div><div class="line"><span class="keyword">return</span> server;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 启动服务端</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startServer</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">// 添加连接监听</span></div><div class="line">server.addConnectListener(<span class="keyword">new</span> ConnectListener() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnect</span><span class="params">(SocketIOClient socketIOClient)</span> </span>&#123;</div><div class="line">logger.info(<span class="string">"server 服务端启动成功"</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 添加断开连接监听</span></div><div class="line">server.addDisconnectListener(<span class="keyword">new</span> DisconnectListener() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDisconnect</span><span class="params">(SocketIOClient socketIOClient)</span> </span>&#123;</div><div class="line">logger.info(<span class="string">"server 服务端断开连接"</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 添加事件监听</span></div><div class="line">server.addEventListener(<span class="string">"join"</span>, String.class, <span class="keyword">new</span> DataListener&lt;String&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onData</span><span class="params">(SocketIOClient socketIOClient, String str,</span></span></div><div class="line">AckRequest ackRequest)</div><div class="line"><span class="keyword">throws</span> Exception &#123;</div><div class="line">logger.info(<span class="string">"收到客户端加入消息："</span> + str);</div><div class="line">server.getBroadcastOperations().sendEvent(<span class="string">"joinSuccess"</span>, <span class="string">"join success"</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 添加事件监听</span></div><div class="line">server.addEventListener(<span class="string">"chatMessage"</span>, TimeMessage.class, <span class="keyword">new</span> DataListener&lt;TimeMessage&gt;() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onData</span><span class="params">(SocketIOClient socketIOClient, TimeMessage message,</span></span></div><div class="line">AckRequest ackRequest)</div><div class="line"><span class="keyword">throws</span> Exception &#123;</div><div class="line">logger.info(<span class="string">"收到客户端消息："</span> + message.toString());</div><div class="line">server.getBroadcastOperations().sendEvent(<span class="string">"return message"</span>, message.toString());</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 启动服务端</span></div><div class="line">server.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 停止服务端</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopServer</span><span class="params">()</span> </span>&#123;</div><div class="line">server.stop();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>initServer 方法 初始化服务端本地 9090 端口；</li><li>startServer 方法中，添加一系列事件监听器，并根据事件作出响应；</li><li>通过 server.start() 启动服务端，server.stop() 停止服务端；</li></ol><h4 id="创建客户端类-SocketClient"><a href="#创建客户端类-SocketClient" class="headerlink" title="创建客户端类 SocketClient"></a>创建客户端类 SocketClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.socket.socketio;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.socket.common.date.DateUtils;</div><div class="line"><span class="keyword">import</span> io.socket.client.IO;</div><div class="line"><span class="keyword">import</span> io.socket.client.Socket;</div><div class="line"><span class="keyword">import</span> io.socket.emitter.Emitter.Listener;</div><div class="line"><span class="keyword">import</span> java.net.URISyntaxException;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Future;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledThreadPoolExecutor;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"><span class="keyword">import</span> org.json.JSONObject;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * socketio 客户端实现</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-09-03 1:06</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</div><div class="line"><span class="comment">// 初始化连接</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Socket socket = initSocket();</div><div class="line"><span class="comment">// 初始化连接池</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> ScheduledThreadPoolExecutor scheduledExecutorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(</div><div class="line"><span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line"><span class="comment">// 连接标识</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isConnected;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String onMessageContent = <span class="keyword">null</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用于存放每个进来任务的 future ，key：为任务id，value：future，</div><div class="line"> * 目的是为了可以通过条件控制任务，通过接口调用可以 cancel 对应的 future</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Map&lt;String, Future&gt; futureMap = <span class="keyword">new</span> HashMap&lt;String, Future&gt;();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 连接监听事件</div><div class="line"> * 实现消息回调接口</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Listener onConnect = <span class="keyword">new</span> Listener() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object... objects)</span> </span>&#123;</div><div class="line">logger.info(<span class="string">"client 连接服务端成功："</span>);</div><div class="line"><span class="keyword">if</span> (!isConnected) &#123;</div><div class="line">socket.emit(<span class="string">"connect message"</span>, <span class="string">"hello"</span>);</div><div class="line">&#125;</div><div class="line">isConnected = <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 断开连接端口监听</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Listener onDisconnect = <span class="keyword">new</span> Listener() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object... objects)</span> </span>&#123;</div><div class="line">logger.info(<span class="string">"client 断开服务端连接："</span> + objects[<span class="number">0</span>]);</div><div class="line">isConnected = <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 连接错误监听</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Listener onConnetError = <span class="keyword">new</span> Listener() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object... objects)</span> </span>&#123;</div><div class="line">logger.info(<span class="string">"client 连接服务端错误："</span> + objects[<span class="number">0</span>]);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 连接超时监听</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Listener onConnetTimeout = <span class="keyword">new</span> Listener() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object... objects)</span> </span>&#123;</div><div class="line">logger.info(<span class="string">"client 连接服务端超时："</span> + objects[<span class="number">0</span>]);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 消息监听事件</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Listener onMessage = <span class="keyword">new</span> Listener() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Object... objects)</span> </span>&#123;</div><div class="line">logger.info(<span class="string">"收到返回监听事件："</span> + objects[<span class="number">0</span>]);</div><div class="line">onMessageContent = (String) objects[<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化 socket 连接</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Socket <span class="title">initSocket</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">socket = IO.socket(<span class="string">"http://localhost:9090"</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> socket;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 连接处理</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectSocket</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 连接</span></div><div class="line">socket.connect();</div><div class="line"></div><div class="line"><span class="comment">// 添加监听事件</span></div><div class="line">addConnectListenerEvent();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 断开连接</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disConnectSocket</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">// 断开连接</span></div><div class="line">socket.disconnect();</div><div class="line"><span class="comment">// 添加监听事件</span></div><div class="line">addDisConnectListenerEvent();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加连接监听事件</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addConnectListenerEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">socket.on(Socket.EVENT_CONNECT, onConnect);  <span class="comment">// 连接成功</span></div><div class="line">socket.on(Socket.EVENT_DISCONNECT, onDisconnect);  <span class="comment">// 断开连接</span></div><div class="line">socket.on(Socket.EVENT_CONNECT_ERROR, onConnetError);<span class="comment">// 连接错误</span></div><div class="line">socket.on(Socket.EVENT_CONNECT_TIMEOUT, onConnetTimeout);  <span class="comment">// 连接超时</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加断开连接监听事件</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDisConnectListenerEvent</span><span class="params">()</span> </span>&#123;</div><div class="line">socket.off(Socket.EVENT_CONNECT, onConnect);  <span class="comment">// 连接成功</span></div><div class="line">socket.off(Socket.EVENT_DISCONNECT, onDisconnect);  <span class="comment">// 断开连接</span></div><div class="line">socket.off(Socket.EVENT_CONNECT_ERROR, onConnetError);<span class="comment">// 连接错误</span></div><div class="line">socket.off(Socket.EVENT_CONNECT_TIMEOUT, onConnetTimeout);  <span class="comment">// 连接超时</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 启动客户端并指定发送消息任务开始时间</div><div class="line"> * <span class="doctag">@param</span> id 指定的任务id</div><div class="line"> * <span class="doctag">@param</span> startTime 任务开始时间</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startClient</span><span class="params">(String id, String startTime)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">this</span>.judgeConnection();</div><div class="line"><span class="keyword">this</span>.judgeHandleExistFuture(id);</div><div class="line"><span class="keyword">this</span>.emitJoined(id);</div><div class="line"><span class="comment">// 指定从当前时间延迟多久后开始执行定时的任务，时间单位可以在调用方法时指定</span></div><div class="line"><span class="keyword">long</span> delay = <span class="number">0</span>;</div><div class="line"><span class="comment">// 指定每次执行任务的时间间隔</span></div><div class="line"><span class="keyword">long</span> period = <span class="number">10000</span>;</div><div class="line">Date date = DateUtils.parseShortDateTime(startTime);</div><div class="line"><span class="comment">// 计算任务开始时间到当前时间的毫秒差</span></div><div class="line"><span class="keyword">long</span> targetTimeMillis = date.getTime();</div><div class="line"><span class="keyword">long</span> initDelay = targetTimeMillis - System.currentTimeMillis();</div><div class="line">delay = initDelay &gt; <span class="number">0</span> ? initDelay : delay;</div><div class="line">logger.info(<span class="string">"启动定时任务：delay="</span> + delay + <span class="string">" period="</span> + period);</div><div class="line"><span class="comment">// 因为每天会定时结束所有服务，当再次有任务进来时要先初始化线程池</span></div><div class="line"><span class="keyword">if</span> (scheduledExecutorService.isShutdown()) &#123;</div><div class="line">scheduledExecutorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">Future future = scheduledExecutorService</div><div class="line">.scheduleAtFixedRate(<span class="keyword">new</span> HandleMessageRunnable(id), delay, period,</div><div class="line">TimeUnit.MILLISECONDS);</div><div class="line"><span class="comment">// 将 future 放入map</span></div><div class="line">futureMap.put(id, future);</div><div class="line">logger.info(<span class="string">"已有客户端："</span> + futureMap.keySet());</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 加入事件监听</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">emitJoined</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">socket.emit(<span class="string">"join"</span>, id).on(<span class="string">"joinSuccess"</span>, onMessage);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断连接</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">judgeConnection</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (!isConnected) &#123;</div><div class="line"><span class="keyword">this</span>.initSocket();</div><div class="line"><span class="keyword">this</span>.connectSocket();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * cancel 任务</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">judgeHandleExistFuture</span> <span class="params">(String id)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (futureMap.containsKey(id)) &#123;</div><div class="line">Future future = futureMap.get(id);</div><div class="line">future.cancel(<span class="keyword">true</span>);</div><div class="line">futureMap.remove(id);</div><div class="line">logger.info(id + <span class="string">" task cancelled!"</span>);</div><div class="line">logger.info(<span class="string">"剩余客户端："</span> + futureMap.keySet());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * cancel 掉 id 对应的任务</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endClient</span><span class="params">(String id)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">this</span>.judgeHandleExistFuture(id);</div><div class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">logger.error(e.getMessage());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 结束所有任务</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">scheduledExecutorService.shutdown();</div><div class="line">futureMap.clear();</div><div class="line">logger.info(<span class="string">"task have shutdown!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 处理任务</div><div class="line"> * 通过固定频率发送消息到服务端</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">HandleMessageRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String id;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HandleMessageRunnable</span><span class="params">(String id)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.id = id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">// 先发送 joined 事件，当收到回执后再发送 chatMessage 消息</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != onMessageContent &amp;&amp; onMessageContent.equals(<span class="string">"join success"</span>)) &#123;</div><div class="line">String currentTime = DateUtils.formatStandardDateTime(<span class="keyword">new</span> Date());</div><div class="line">jsonObject.put(<span class="string">"id"</span>, id);</div><div class="line">jsonObject.put(<span class="string">"currentTime"</span>, currentTime);</div><div class="line">logger.info(<span class="string">"客户端发送消息："</span> + jsonObject.toString());</div><div class="line">socket.emit(<span class="string">"chatMessage"</span>, jsonObject);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">logger.info(<span class="string">"未收到加入返回事件"</span>);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>通过 initSocket 初始化客户端，初始化地址 <a href="http://localhost:9090；" target="_blank" rel="external">http://localhost:9090；</a></li><li>通过 new ScheduledThreadPoolExecutor(10)，初始化任务调度线程池；</li><li>使用 Map<string, future=""> 用于存放每个进来任务的 future ，key：为任务id，value：future，目的是为了可以通过条件控制任务，通过接口调用可以 cancel 对应的 future；</string,></li><li>通过 connectSocket 连接服务端，并调用 addConnectListenerEvent 添加一些列监听事件；</li><li>通过 startClient 启动任务。</li><li>通过 HandleMessageRunnable 类实现具体消息的处理。</li></ol><h4 id="创建定时任务调度控制器-ScheduledController"><a href="#创建定时任务调度控制器-ScheduledController" class="headerlink" title="创建定时任务调度控制器 ScheduledController"></a>创建定时任务调度控制器 ScheduledController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.socket.web;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.socket.socketio.SocketClient;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定时任务调度控制器</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-09-03 1:53</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledController</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line"></div><div class="line"> <span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> SocketClient client;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 启动客户端任务</div><div class="line"> * <span class="doctag">@param</span> id 任务id</div><div class="line"> * <span class="doctag">@param</span> startTime 任务开始时间</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/start/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">startClient</span><span class="params">(@PathVariable String id, @RequestParam String startTime)</span> </span>&#123;</div><div class="line">client.startClient(id, startTime);</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;String&gt;(HttpStatus.NO_CONTENT);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 取消消息任务</div><div class="line"> * <span class="doctag">@param</span> id</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/end/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">endClient</span><span class="params">(@PathVariable String id)</span> </span>&#123;</div><div class="line">client.endClient(id);</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;String&gt;(HttpStatus.NO_CONTENT);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过接口调用手动结束所有任务</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/end"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">logger.info(<span class="string">"手动结束所有任务"</span>);</div><div class="line">client.shutdown();</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;String&gt;(HttpStatus.NO_CONTENT);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定时结束所有任务</div><div class="line"> */</div><div class="line"><span class="meta">@Scheduled</span>(cron = <span class="string">"0 0 2 * * ?"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopClient</span><span class="params">()</span> </span>&#123;</div><div class="line">logger.info(<span class="string">"定时结束所有任务"</span>);</div><div class="line">client.shutdown();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>调用 <a href="http://localhost:8080/socket-demo/start/{id}?startTime=yyyyMMddHHmmss" target="_blank" rel="external">http://localhost:8080/socket-demo/start/{id}?startTime=yyyyMMddHHmmss</a> 接口可以控制指定任务在指定时间开始执行；</li><li>调用 <a href="http://localhost:8080/socket-demo/end/{id}" target="_blank" rel="external">http://localhost:8080/socket-demo/end/{id}</a> 取消指定任务；</li><li>调用 <a href="http://localhost:8080/socket-demo/end" target="_blank" rel="external">http://localhost:8080/socket-demo/end</a> 可以手动接收当前在执行的所有任务，scheduledExecutorService.shutdown() 不会强制所有任务立即停止，而是会在正在执行的本次任务执行完后才 shutdown；</li><li>这里使用到了 @Scheduled ，需要到 Application 类中的加上 @EnableScheduling 注解以开启定时任务；</li><li>stopClient 方法可以定时结束所有任务，以节省资源，这个根据业务自身决定是否需要。</li></ol><h4 id="修改-Appingcation-类"><a href="#修改-Appingcation-类" class="headerlink" title="修改 Appingcation 类"></a>修改 Appingcation 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.socket;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.socket.socketio.SocketServer;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableScheduling</span></div><div class="line"><span class="meta">@ComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootSocketApplication</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(SpringbootSocketApplication.class, args);</div><div class="line">SocketServer server = <span class="keyword">new</span> SocketServer();</div><div class="line">server.startServer();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><ol><li>启动项目</li><li>调用 <a href="http://localhost:8080/socket-demo/start/{id}?startTime=yyyyMMddHHmmss" target="_blank" rel="external">http://localhost:8080/socket-demo/start/{id}?startTime=yyyyMMddHHmmss</a> 接口启动任务。<img src="http://ojirj5wkr.bkt.clouddn.com/image/springboot/soketio02.jpg" alt=""></li><li>查看控制台信息,注意 2 的时间和现在的时间，未到时间： <img src="http://ojirj5wkr.bkt.clouddn.com/image/springboot/socketio-03.jpg" alt="">到时间：<img src="http://ojirj5wkr.bkt.clouddn.com/image/springboot/socketio-04.jpg" alt="">;</li><li>再次调用 <a href="http://localhost:8080/socket-demo/start/{id}?startTime=yyyyMMddHHmmss" target="_blank" rel="external">http://localhost:8080/socket-demo/start/{id}?startTime=yyyyMMddHHmmss</a> 加入新任务：<img src="http://ojirj5wkr.bkt.clouddn.com/image/springboot/socketio-05.jpg" alt=""><img src="http://ojirj5wkr.bkt.clouddn.com/image/springboot/socketio-06.jpg" alt="">；</li><li><a href="http://localhost:8080/socket-demo/end/{id}，可以取消任务。" target="_blank" rel="external">http://localhost:8080/socket-demo/end/{id}，可以取消任务。</a></li><li><a href="http://localhost:8080/socket-demo/end" target="_blank" rel="external">http://localhost:8080/socket-demo/end</a> 结束所有任务。</li></ol><hr><h3 id="源码地址："><a href="#源码地址：" class="headerlink" title="源码地址："></a>源码地址：</h3><ul><li><a href="https://github.com/alexpdh/springboot-demo/tree/master/springboot-socket" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">https://github.com/alexpdh/springboot-demo/tree/master/springboot-socket</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/image/springboot/socketio.jpg&quot; alt=&quot;socketio.jpg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;基于 socket.io 来说，采用 node 实现更加合适，本文使用两个后端的开源框架实现，服务端使用 &lt;a href=&quot;https://github.com/mrniko/netty-socketio&quot;&gt;&lt;span style=&quot;color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;&quot;&gt;netty-socketio&lt;/span&gt;&lt;/a&gt; ，客户端使用 &lt;a href=&quot;https://github.com/socketio/socket.io-client&quot;&gt;&lt;span style=&quot;color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;&quot;&gt;socket.io-client&lt;/span&gt;&lt;/a&gt;。使用 Scheduledexecutorservice 实现消息可配置任务调度。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://alexpdh.com/categories/Spring-Boot/"/>
    
    
      <category term="socketio" scheme="http://alexpdh.com/tags/socketio/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 集成 WebSocket 基于 STOMP 实现消息实时通信</title>
    <link href="http://alexpdh.com/2017/09/02/springboot-websocket/"/>
    <id>http://alexpdh.com/2017/09/02/springboot-websocket/</id>
    <published>2017-09-02T06:11:07.000Z</published>
    <updated>2017-09-26T09:51:40.897Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ojirj5wkr.bkt.clouddn.com/image/springboot/websocket-java.jpg" alt="websocket-java.jpg"><br><a id="more"></a></p><hr><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h4><p><strong>Spring Boot：</strong>是为了简化使用 Spring 开发的应用产生的，它使用“习惯由于配置”的理念使项目快速运行起来。使用 Spring Boot 你可以不用或者只需要很少的 Spring 配置，你可以仅仅使用一个 java -jar 命令就运行起一个 java 项目。</p><p><strong>优点</strong></p><ul><li>快速构建项目。</li><li>开箱即用，提供各种默认配置来简化项目配置。</li><li>项目可以独立运行，无须外部依赖 Servlet 容器。</li><li>对主流框架的无配置集成。</li><li>提供各种 starter 简化 Maven 配置。</li></ul><h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h4><p><strong>WebSocket：</strong>是 HTML5 开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。 WebSocket 通信协议于2011年被IETF定为标准RFC 6455，WebSocketAPI 被W3C定为标准。 在WebSocket API 中，浏览器和服务器只需要要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p><p><strong>特点</strong></p><ul><li>为浏览器和服务端提供了双工异步通信的功能，即服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。</li><li>建立在 TCP 协议之上，服务器端的实现比较容易。</li><li>与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li><li>数据格式比较轻量，性能开销小，通信高效。</li><li>可以发送文本，也可以发送二进制数据。</li><li>没有同源限制，客户端可以与任意服务器通信。</li><li>协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。</li></ul><h4 id="STOMP"><a href="#STOMP" class="headerlink" title="STOMP"></a>STOMP</h4><p><strong>STOMP：</strong>即Simple (or Streaming) Text Orientated Messaging Protocol，它是一个简单的文本消息传输协议，属于 WebSocket 的子协议，提供了一个可互操作的连接格式，允许STOMP客户端与任意STOMP消息代理（Broker）进行交互。STOMP协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。</p><p><strong>优点</strong></p><ul><li>使用 WebSocket 需要增加浏览器的兼容支持，如 IE 10+、Chrome 13+、Firefox 6+，而 STOMP 是一个更高级的协议，它使用一个基于帧（frame）的格式来定义消息，与 HTTP 的 request 和 response 类似。</li></ul><hr><h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><h4 id="添加-WebSocket-和-Thymeleaf-依赖"><a href="#添加-WebSocket-和-Thymeleaf-依赖" class="headerlink" title="添加 WebSocket 和 Thymeleaf 依赖"></a>添加 WebSocket 和 Thymeleaf 依赖</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/image/springboot/springboot-socket-01.jpg" alt="springboot-socket-01.jpg"></p><h4 id="新建-websocket-配置类"><a href="#新建-websocket-配置类" class="headerlink" title="新建 websocket 配置类"></a>新建 websocket 配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.socket.websocket;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.messaging.simp.config.MessageBrokerRegistry;</div><div class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;</div><div class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</div><div class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * websocket 配置类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-09-02 15:46</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebSocketMessageBroker</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">extends</span> <span class="title">AbstractWebSocketMessageBrokerConfigurer</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry stompEndpointRegistry)</span> </span>&#123;</div><div class="line">stompEndpointRegistry.addEndpoint(<span class="string">"/endpointWeb"</span>).withSockJS();;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry messageBrokerRegistry)</span> </span>&#123;</div><div class="line">messageBrokerRegistry.enableSimpleBroker(<span class="string">"/topic"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>通过 @EnableWebSocketMessageBroker 注解来开启使用 STOMP 协议来传输基于代理（message broker）的消息。</li><li>通过复写父类的 registerStompEndpoints 方法，注册 STOMP 协议的节点来映射指定的 URL 并指定使用 SocketJS 协议。</li><li>通过复写父类的 configureMessageBroker 方法，来配置一个广播式消息代理。</li></ol><h4 id="新建浏览器像服务端发送消息封装类-ClientRequestMessage"><a href="#新建浏览器像服务端发送消息封装类-ClientRequestMessage" class="headerlink" title="新建浏览器像服务端发送消息封装类 ClientRequestMessage"></a>新建浏览器像服务端发送消息封装类 ClientRequestMessage</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.socket.websocket;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 浏览器像服务端发送消息封装类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-09-02 16:10</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientRequestMessage</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="新建服务端像浏览器端发送消息封装类-ServerResponseMessage"><a href="#新建服务端像浏览器端发送消息封装类-ServerResponseMessage" class="headerlink" title="新建服务端像浏览器端发送消息封装类 ServerResponseMessage"></a>新建服务端像浏览器端发送消息封装类 ServerResponseMessage</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.socket.websocket;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 服务端像浏览器端发送消息封装类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-09-02 16:13</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerResponseMessage</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> String responseMessage;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerResponseMessage</span><span class="params">(String responseMessage)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.responseMessage = responseMessage;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getResponseMessage</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">return</span> responseMessage;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="新建请求控制器-WsController"><a href="#新建请求控制器-WsController" class="headerlink" title="新建请求控制器 WsController"></a>新建请求控制器 WsController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.socket.websocket;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.MessageMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.SendTo;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 请求控制器</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-09-02 16:16</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WsController</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@MessageMapping</span>(<span class="string">"/welcome"</span>)</div><div class="line"><span class="meta">@SendTo</span>(<span class="string">"/topic/getResponse"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ServerResponseMessage <span class="title">say</span><span class="params">(ClientRequestMessage message)</span> </span>&#123;</div><div class="line">System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; "</span> + message.getName());</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> ServerResponseMessage(<span class="string">"Welcome,"</span> + message.getName() + <span class="string">"!"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>通过 @MessageMapping 注解接收浏览器端发送的消息。</li><li>通过 @SendTo 注解像浏览器端广播消息。</li></ol><h4 id="构建浏览器端"><a href="#构建浏览器端" class="headerlink" title="构建浏览器端"></a>构建浏览器端</h4><ul><li>需要下载 stomp.js、sockjs.min.js、jquery.js 几个脚本支持。将几个文件放在 src/main/resources/static 下。</li><li>演示页面 ws.html 放在 src/main/resources/templates 下</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>广播式WebSocket<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;js/sockjs.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;js/stomp.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;js/jquery-3.1.1.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"disconnect()"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"color: #e80b0a;"</span>&gt;</span>Sorry，浏览器不支持WebSocket<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"connect"</span> <span class="attr">onclick</span>=<span class="string">"connect();"</span>&gt;</span>连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"disconnect"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span> <span class="attr">onclick</span>=<span class="string">"disconnect();"</span>&gt;</span>断开连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"conversationDiv"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>输入你的名字<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"sendName"</span> <span class="attr">onclick</span>=<span class="string">"sendName();"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"response"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    var stompClient = null;</div><div class="line">    function setConnected(connected) &#123;</div><div class="line">        document.getElementById("connect").disabled = connected;</div><div class="line">        document.getElementById("disconnect").disabled = !connected;</div><div class="line">        document.getElementById("conversationDiv").style.visibility = connected ? 'visible' : 'hidden';</div><div class="line">        $("#response").html();</div><div class="line">    &#125;</div><div class="line">    function connect() &#123;</div><div class="line">        var socket = new SockJS('/endpointWeb');</div><div class="line">        stompClient = Stomp.over(socket);</div><div class="line">        stompClient.connect(&#123;&#125;, function (frame) &#123;</div><div class="line">            setConnected(true);</div><div class="line">            console.log('Connected:' + frame);</div><div class="line">            stompClient.subscribe('/topic/getResponse', function (response) &#123;</div><div class="line">                showResponse(JSON.parse(response.body).responseMessage);</div><div class="line">            &#125;)</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    function disconnect() &#123;</div><div class="line">        if (stompClient != null) &#123;</div><div class="line">            stompClient.disconnect();</div><div class="line">        &#125;</div><div class="line">        setConnected(false);</div><div class="line">        console.log('Disconnected');</div><div class="line">    &#125;</div><div class="line">    function sendName() &#123;</div><div class="line">        var name = $('#name').val();</div><div class="line">        console.log('name:' + name);</div><div class="line">        stompClient.send("/welcome", &#123;&#125;, JSON.stringify(&#123;'name': name&#125;));</div><div class="line">    &#125;</div><div class="line">    function showResponse(message) &#123;</div><div class="line">        $("#response").html(message);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="新建-WebMvcConfig-类"><a href="#新建-WebMvcConfig-类" class="headerlink" title="新建 WebMvcConfig 类"></a>新建 WebMvcConfig 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.socket.websocket;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ViewControllerRegistry;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * viewController</div><div class="line"> * 为ws.html提供路径映射</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-09-02 16:18</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</div><div class="line">registry.addViewController(<span class="string">"/ws"</span>).setViewName(<span class="string">"/ws"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/image/springboot/websocket-topic.jpg" alt="websocket-topic.jpg"></p><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">Spring Boot 实战</span></li><li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.ruanyifeng.com/blog/2017/05/websocket.html</span></a></li><li><a href="https://github.com/alexpdh/springboot-demo/tree/master/springboot-socket" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">源码地址：https://github.com/alexpdh/springboot-demo/tree/master/springboot-socket</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/image/springboot/websocket-java.jpg&quot; alt=&quot;websocket-java.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="http://alexpdh.com/categories/Spring-Boot/"/>
    
    
      <category term="WebSocket" scheme="http://alexpdh.com/tags/WebSocket/"/>
    
      <category term="Stomp" scheme="http://alexpdh.com/tags/Stomp/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（二十五）：访问者模式</title>
    <link href="http://alexpdh.com/2017/08/19/visitor-pattern/"/>
    <id>http://alexpdh.com/2017/08/19/visitor-pattern/</id>
    <published>2017-08-19T09:19:07.000Z</published>
    <updated>2017-09-26T09:51:40.907Z</updated>
    
    <content type="html"><![CDATA[<h4 id="访问者模式（Visitor-Pattern）"><a href="#访问者模式（Visitor-Pattern）" class="headerlink" title="访问者模式（Visitor Pattern）"></a>访问者模式（Visitor Pattern）</h4><p><strong>访问者模式（Visitor Pattern）：</strong>属于类的行为模式。表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p><hr><h4 id="访问者模式UML图"><a href="#访问者模式UML图" class="headerlink" title="访问者模式UML图"></a>访问者模式UML图</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/visitor-pattern.jpg" alt="visitor-pattern.jpg"><br><a id="more"></a></p><hr><h4 id="访问者模式涉及的角色"><a href="#访问者模式涉及的角色" class="headerlink" title="访问者模式涉及的角色"></a>访问者模式涉及的角色</h4><p><strong>抽象访问者（Visitor）角色：</strong>为该对象结构中 ConcreteElement 的每一个类声明一个 visite 操作。<br><strong>具体访问者(ConcreteVisitor)角色：</strong>实现每个由 visitor 声明的操作。每个操作实现算法的一部分，而该算法片段乃是对应于结构中的对象的类。<br><strong>抽象元素（Element）角色：</strong>定义一个 accept 操作，它以一个访问者为参数。<br><strong>具体元素（ConcreteElement）角色：</strong>实现了抽象元素所规定的接受操作。<br><strong>结构对象(ObjectStructure)角色：</strong>有如下的责任，可以遍历结构中的所有元素；如果需要，提供一个高层次的接口让访问者对象可以访问每一个元素；如果需要，可以设计成一个复合对象或者一个聚集，如List或Set。</p><hr><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p><strong>抽象访问者类 Visitor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.visitorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 访问者模式：访问者类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-19 17:24</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 对应于 ConcreteElementA 的访问操作</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> concreteElementA 具体元素 A</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visitConcreteElementA</span><span class="params">(ConcreteElementA concreteElementA)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 对应于 ConcreteElementB 的访问操作</div><div class="line">   * </div><div class="line">   * <span class="doctag">@param</span> concreteElementB 具体元素 B</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visitConcreteElementB</span><span class="params">(ConcreteElementB concreteElementB)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体访问者1类 ConcreteVisitor1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.visitorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 访问者模式：具体访问者1</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-19 17:35</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitConcreteElementA</span><span class="params">(ConcreteElementA concreteElementA)</span> </span>&#123;</div><div class="line">    System.out.println(ConcreteElementA.class.getSimpleName() + <span class="string">" 被 "</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" 访问！"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitConcreteElementB</span><span class="params">(ConcreteElementB concreteElementB)</span> </span>&#123;</div><div class="line">    System.out.println(ConcreteElementB.class.getSimpleName() + <span class="string">" 被 "</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" 访问！"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体访问者2类 ConcreteVisitor2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.visitorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 访问者模式：具体访问者2</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-19 17:36</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor2</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitConcreteElementA</span><span class="params">(ConcreteElementA concreteElementA)</span> </span>&#123;</div><div class="line">    System.out.println(ConcreteElementA.class.getSimpleName() + <span class="string">" 被 "</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" 访问！"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitConcreteElementB</span><span class="params">(ConcreteElementB concreteElementB)</span> </span>&#123;</div><div class="line">    System.out.println(ConcreteElementB.class.getSimpleName() + <span class="string">" 被 "</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" 访问！"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>抽象元素类 Element</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.visitorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 访问者模式：抽象元素类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-19 17:25</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 接收操作</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> visitor 访问者类</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体元素类A ConcreteElementA</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.visitorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 访问者模式：具体元素类A</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-19 17:28</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">    visitor.visitConcreteElementA(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * ConcreteElementA 特有方法</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体元素类B ConcreteElementB</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.visitorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 访问者模式：具体元素类B</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-19 17:29</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">    visitor.visitConcreteElementB(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * ConcreteElementB 特有方法</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>结构对象类 ObjectStructure</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.visitorPattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 访问者模式：结构对象类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-19 20:05</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> List&lt;Element&gt; elements = <span class="keyword">new</span> ArrayList&lt;Element&gt;();</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 添加元素</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> element</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Element element)</span> </span>&#123;</div><div class="line">    elements.add(element);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 移除元素</div><div class="line">   * <span class="doctag">@param</span> element</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deatch</span><span class="params">(Element element)</span> </span>&#123;</div><div class="line">    elements.remove(element);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 执行方法</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> visitor</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Element e : elements) &#123;</div><div class="line">      e.accept(visitor);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端测试类 VisitorPatternTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.visitorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 访问者模式：客户端测试类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-19 20:04</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorPatternTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="comment">// 创建一个结构对象</span></div><div class="line">   ObjectStructure o = <span class="keyword">new</span> ObjectStructure();</div><div class="line">    <span class="comment">// 给结构添加元素</span></div><div class="line">   o.attach(<span class="keyword">new</span> ConcreteElementA());</div><div class="line">   o.attach(<span class="keyword">new</span> ConcreteElementB());</div><div class="line"></div><div class="line">   <span class="comment">// 创建访问者</span></div><div class="line">   Visitor v1 = <span class="keyword">new</span> ConcreteVisitor1();</div><div class="line">   Visitor v2 = <span class="keyword">new</span> ConcreteVisitor2();</div><div class="line"></div><div class="line">   o.accept(v1);</div><div class="line">   o.accept(v2);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><ol><li>客户端创建一个结构对象 ObjectStructure，将一个新的 ConcreteElementA 和一个新的 ConcreteElementB传入。</li><li>客户端创建一个 ConcreteVisitor1 和一个 ConcreteVisitor2 对象，并将对应的两个对象传入结构对象中。</li><li>客户端调用结构对象聚集管理方法，将 ConcreteElementA 和 ConcreteElementB 节点加入到结构对象中去。</li><li>客户端调用结构对象的接受方法 accept()，启动访问过程。</li><li>ConcreteElementA 对象的接受方法 accept() 被调用，并将 ConcreteVisitor1 对象本身传入；</li><li>ConcreteElementA 对象反过来调用 ConcreteVisitor1 对象的访问方法，并将 ConcreteElementA 对象本身传入；</li><li>ConcreteVisitor1 对象调用 输出对应信息。</li><li>ConcreteElementB 与 ConcreteVisitor2 执行过程类似。</li></ol><hr><h4 id="双重分派"><a href="#双重分派" class="headerlink" title="双重分派"></a>双重分派</h4><p><strong>宗量：</strong>一个方法所属的对象叫做方法的接收者，方法的接收者与方法的参数统称做方法的宗量。<br><strong>双重分派：</strong>一个方法根据两个宗量的类型来决定执行不同的代码，这就是“双重分派”。</p><ul><li>上面的 5 6 7 8 步骤就是一个双重分派过程。</li></ul><hr><h4 id="访问者模式的优点"><a href="#访问者模式的优点" class="headerlink" title="访问者模式的优点"></a>访问者模式的优点</h4><p><strong>好的扩展性：</strong>能够在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。<br><strong>好的复用性：</strong>可以通过访问者来定义整个对象结构通用的功能，从而提高复用程度。<br><strong>分离无关行为：</strong>　可以通过访问者来分离无关的行为，把相关的行为封装在一起，构成一个访问者，这样每一个访问者的功能都比较单一。</p><hr><h4 id="访问者模式的缺点"><a href="#访问者模式的缺点" class="headerlink" title="访问者模式的缺点"></a>访问者模式的缺点</h4><p><strong>对象结构变化很困难：</strong>不适用于对象结构中的类经常变化的情况，因为对象结构发生了改变，访问者的接口和访问者的实现都要发生相应的改变，代价太高。<br><strong>破坏封装：</strong>访问者模式通常需要对象结构开放内部数据给访问者和ObjectStructrue，这破坏了对象的封装性。</p><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">大话设计模式</span></li><li><a href="http://www.cnblogs.com/java-my-life" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.cnblogs.com/java-my-life</span></a></li><li><a href="https://github.com/alexpdh/bigTalkDesignPattenSample" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">源码地址：https://github.com/alexpdh/bigTalkDesignPattenSample</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;访问者模式（Visitor-Pattern）&quot;&gt;&lt;a href=&quot;#访问者模式（Visitor-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;访问者模式（Visitor Pattern）&quot;&gt;&lt;/a&gt;访问者模式（Visitor Pattern）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;访问者模式（Visitor Pattern）：&lt;/strong&gt;属于类的行为模式。表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;访问者模式UML图&quot;&gt;&lt;a href=&quot;#访问者模式UML图&quot; class=&quot;headerlink&quot; title=&quot;访问者模式UML图&quot;&gt;&lt;/a&gt;访问者模式UML图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/visitor-pattern.jpg&quot; alt=&quot;visitor-pattern.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://alexpdh.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="行为型模式" scheme="http://alexpdh.com/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（二十四）：解释器模式</title>
    <link href="http://alexpdh.com/2017/08/14/interpreter-pattern/"/>
    <id>http://alexpdh.com/2017/08/14/interpreter-pattern/</id>
    <published>2017-08-13T16:09:41.000Z</published>
    <updated>2017-09-26T09:51:40.844Z</updated>
    
    <content type="html"><![CDATA[<h4 id="解释器模式（Interpreter-Pattern）"><a href="#解释器模式（Interpreter-Pattern）" class="headerlink" title="解释器模式（Interpreter Pattern）"></a>解释器模式（Interpreter Pattern）</h4><p><strong>解释器模式（Interpreter Pattern）:</strong>属于对象的行为模式。给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p><hr><h4 id="解释器模式UML图"><a href="#解释器模式UML图" class="headerlink" title="解释器模式UML图"></a>解释器模式UML图</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/interpreter-pattern.jpg" alt="interpreter-pattern.jpg"><br><a id="more"></a></p><hr><h4 id="解释器模式涉及的角色"><a href="#解释器模式涉及的角色" class="headerlink" title="解释器模式涉及的角色"></a>解释器模式涉及的角色</h4><p><strong>抽象表达式（AbstractExpression）角色：</strong>声明一个所有的具体表达式角色都需要实现的抽象接口。这个接口主要是一个interpret()方法，称做解释操作。<br><strong>终结符表达式（TerminalExpression）角色：</strong>实现了抽象表达式角色所要求的接口，主要是一个interpret()方法；文法中的每一个终结符都有一个具体终结表达式与之相对应。比如有一个简单的公式R=R1+R2，在里面R1和R2就是终结符，对应的解析R1和R2的解释器就是终结符表达式。<br><strong>非终结符表达式（NonTerminalExpression ）角色：</strong>文法中的每一条规则都需要一个具体的非终结符表达式，非终结符表达式一般是文法中的运算符或者其他关键字，比如公式R=R1+R2中，“+”就是非终结符，解析“+”的解释器就是一个非终结符表达式。<br><strong>环境(Context)角色：</strong>这个角色的任务一般是用来存放文法中各个终结符所对应的具体值，比如R=R1+R2，我们给R1赋值100，给R2赋值200。这些信息需要存放到环境角色中，很多情况下我们使用Map来充当环境角色就足够了。</p><hr><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p><strong>环境类 InterpreterContext</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.interpreterPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 解释器模式：环境类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-13 23:56</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterpreterContext</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String input;</div><div class="line">  <span class="keyword">private</span> String output;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getInput</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> input;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInput</span><span class="params">(String input)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.input = input;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getOutput</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> output;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOutput</span><span class="params">(String output)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.output = output;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>抽象表达式类 AbstractExpresstion</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.interpreterPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 解释器模式：抽象表达式类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-13 23:57</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExpresstion</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 以给定的环境为准，解释给定的任何一个表达式</div><div class="line">   * <span class="doctag">@param</span> context</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">interpret</span><span class="params">(InterpreterContext context)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>终结符表达式类 TerminalExpression</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.interpreterPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 解释器模式：终结符表达式类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-14 0:01</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">extends</span> <span class="title">AbstractExpresstion</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interpret</span><span class="params">(InterpreterContext context)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"终端解释器"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>非终结表达式类 NonTerminalExpresstion</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.interpreterPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 解释器模式：非终结表达式类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-14 0:04</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonTerminalExpresstion</span> <span class="keyword">extends</span> <span class="title">AbstractExpresstion</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interpret</span><span class="params">(InterpreterContext context)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"非终端解释器"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端测试类 InterpreterPatternTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.interpreterPattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 解释器模式：客户端测试类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-14 0:05</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterpreterPatternTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    InterpreterContext context = <span class="keyword">new</span> InterpreterContext();</div><div class="line">    List&lt;AbstractExpresstion&gt; list = <span class="keyword">new</span> ArrayList&lt;AbstractExpresstion&gt;();</div><div class="line">    list.add(<span class="keyword">new</span> TerminalExpression());</div><div class="line">    list.add(<span class="keyword">new</span> NonTerminalExpresstion());</div><div class="line">    list.add(<span class="keyword">new</span> TerminalExpression());</div><div class="line">    <span class="keyword">for</span> (AbstractExpresstion exp : list) &#123;</div><div class="line">      exp.interpret(context);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="解释器模式优点"><a href="#解释器模式优点" class="headerlink" title="解释器模式优点"></a>解释器模式优点</h4><p>很容易改变和扩展文法，因为解释器模式使用类来表示文法规则，你可以使用继承来改变或扩展该文法。也比较容易实现文法，因为定义抽象语法树中各个节点的类的实现大体类似，这些类都易于直接编写。</p><hr><h4 id="解释器模式缺点"><a href="#解释器模式缺点" class="headerlink" title="解释器模式缺点"></a>解释器模式缺点</h4><p>解释器模式为文法中的每一条规则至少定义一个类，因此包含许多规则的文法可能难以管理和维护。建议当文法非常复杂时，使用其他的技术来处理。</p><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">大话设计模式</span></li><li><a href="http://www.cnblogs.com/java-my-life" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.cnblogs.com/java-my-life</span></a></li><li><a href="https://github.com/alexpdh/bigTalkDesignPattenSample" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">源码地址：https://github.com/alexpdh/bigTalkDesignPattenSample</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;解释器模式（Interpreter-Pattern）&quot;&gt;&lt;a href=&quot;#解释器模式（Interpreter-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;解释器模式（Interpreter Pattern）&quot;&gt;&lt;/a&gt;解释器模式（Interpreter Pattern）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;解释器模式（Interpreter Pattern）:&lt;/strong&gt;属于对象的行为模式。给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;解释器模式UML图&quot;&gt;&lt;a href=&quot;#解释器模式UML图&quot; class=&quot;headerlink&quot; title=&quot;解释器模式UML图&quot;&gt;&lt;/a&gt;解释器模式UML图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/interpreter-pattern.jpg&quot; alt=&quot;interpreter-pattern.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://alexpdh.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="行为型模式" scheme="http://alexpdh.com/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（二十三）：享元模式</title>
    <link href="http://alexpdh.com/2017/08/13/flyweight-pattern/"/>
    <id>http://alexpdh.com/2017/08/13/flyweight-pattern/</id>
    <published>2017-08-13T08:48:07.000Z</published>
    <updated>2017-09-26T09:51:40.825Z</updated>
    
    <content type="html"><![CDATA[<h4 id="享元模式（Flyweight-Pattern）"><a href="#享元模式（Flyweight-Pattern）" class="headerlink" title="享元模式（Flyweight Pattern）"></a>享元模式（Flyweight Pattern）</h4><p><strong>享元模式（Flyweight Pattern）：</strong>属于对象的结构模式。运用共享技术有效地支持大量细粒度的对象。</p><hr><h4 id="享元模式UML图"><a href="#享元模式UML图" class="headerlink" title="享元模式UML图"></a>享元模式UML图</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/flyweight-pattern.jpg" alt="flyweight-pattern.jpg"><br><a id="more"></a></p><hr><h4 id="享元模式涉及的角色"><a href="#享元模式涉及的角色" class="headerlink" title="享元模式涉及的角色"></a>享元模式涉及的角色</h4><p><strong>抽象享元（Flyweight）角色：</strong>所有有具体享元类的超类或接口，通过这个接口，Flyweight 可以接受并作用于外部状态。<br><strong>具体享元（ConcreteFlyweight）角色：</strong>实现抽象享元角色所规定出的接口。如果有内部状态时，为内部状态提供存储空间。<br><strong>未共享的具体享元（UnShargedFlyweight）角色：</strong>指那些不需要共享的 Flyweight 子类，因为 Flyweight抽象类共享成为可能，但它并不强制共享。<br><strong>享元工厂（FlyweightFactory）角色：</strong>一个享元工厂，用来创建并管理 Flyweight 对象，它主要是用来确保合理地共享 Flyweight，当用户请求一个 Flyweight 时，FlyweightFactory 对象听歌一个已创建的实例或者创建一个（如果不存在的话）。</p><hr><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p><strong>抽象享元类 Flyweight</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.flyweightPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 享元模式：抽象享元类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-13 17:09</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 外部状态作为参数传入方法中，</div><div class="line">   * 改变了方法的行为，但是并不改变对象的内部状态</div><div class="line">   * <span class="doctag">@param</span> extrinsicstate 外部状态</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> extrinsicstate)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体享元类 ConcreteFlyweight</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.flyweightPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 享元模式：具体享元类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-13 17:12</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 持有一个内部状态</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> String intrinsicstate;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 构造函数，内部状态作为参数传入</div><div class="line">   * <span class="doctag">@param</span> intrinsicstate</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ConcreteFlyweight</span><span class="params">(String intrinsicstate)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.intrinsicstate = intrinsicstate;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 外部状态作为参数传入方法中，</div><div class="line">   * 改变了方法的行为，但是并不改变对象的内部状态</div><div class="line">   * <span class="doctag">@param</span> extrinsicstate 外部状态</div><div class="line">   */</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> extrinsicstate)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Intrinsic State："</span> + intrinsicstate);</div><div class="line">    System.out.println(<span class="string">"Extrinsic State："</span> + extrinsicstate);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>非共享具体享元类 UnSharedConcreteFlyweiht</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.flyweightPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 享元模式：非共享具体享元类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-13 17:15</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnSharedConcreteFlyweiht</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> extrinsicstate)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"非共享的具体 Flyweiht："</span> + extrinsicstate);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>享元工厂类 FlyweihtFactory</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.flyweightPattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 享元模式：享元工厂类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-13 17:17</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweihtFactory</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Map&lt;String, Flyweight&gt; map = <span class="keyword">new</span> HashMap&lt;String, Flyweight&gt;();</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Flyweight <span class="title">create</span><span class="params">(String intrinsicstate)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!map.containsKey(intrinsicstate)) &#123;</div><div class="line">      map.put(intrinsicstate, <span class="keyword">new</span> ConcreteFlyweight(intrinsicstate));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> map.get(intrinsicstate);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端测试类 FlyweightPatternTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.flyweightPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 享元模式：客户端测试类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-13 17:24</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightPatternTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> extrinsicstate = <span class="number">22</span>;</div><div class="line"></div><div class="line">    FlyweihtFactory factory = <span class="keyword">new</span> FlyweihtFactory();</div><div class="line"></div><div class="line">    Flyweight f1 = factory.create(<span class="string">"X"</span>);</div><div class="line">    f1.operation(<span class="number">21</span>);</div><div class="line"></div><div class="line">    Flyweight f2 = factory.create(<span class="string">"Y"</span>);</div><div class="line">    f2.operation(<span class="number">20</span>);</div><div class="line"></div><div class="line">    Flyweight f3 = factory.create(<span class="string">"X"</span>);</div><div class="line">    f3.operation(<span class="number">19</span>);</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (f1 == f3) &#123;</div><div class="line">      flag = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"内部状态是否可以共享："</span> + flag);</div><div class="line"></div><div class="line">    Flyweight uf1 = <span class="keyword">new</span> UnSharedConcreteFlyweiht();</div><div class="line">    uf1.operation(<span class="number">18</span>);</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="享元模式使用场景"><a href="#享元模式使用场景" class="headerlink" title="享元模式使用场景"></a>享元模式使用场景</h4><p>一个系统有大量相同或者相似的对象，由于这类对象的大量使用，造成内存的大量耗费时可以考虑使用；对象的大部分状态都可以外部化，可以将这些外部状态传入对象中；使用享元模式需要维护一个存储享元对象的享元池，而这需要耗费资源，因此，应当在多次重复使用享元对象时才值得使用享元模式。</p><hr><h4 id="享元模式优点"><a href="#享元模式优点" class="headerlink" title="享元模式优点"></a>享元模式优点</h4><ul><li>它可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份。</li><li>享元模式的外部状态相对独立，而且不会影响其内部状态，从而使得享元对象可以在不同的环境中被共享。</li></ul><hr><h4 id="享元模式缺点"><a href="#享元模式缺点" class="headerlink" title="享元模式缺点"></a>享元模式缺点</h4><ul><li>享元模式使得系统更加复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化。</li><li>为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。</li></ul><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">大话设计模式</span></li><li><a href="http://www.cnblogs.com/java-my-life" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.cnblogs.com/java-my-life</span></a></li><li><a href="https://github.com/alexpdh/bigTalkDesignPattenSample" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">源码地址：https://github.com/alexpdh/bigTalkDesignPattenSample</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;享元模式（Flyweight-Pattern）&quot;&gt;&lt;a href=&quot;#享元模式（Flyweight-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;享元模式（Flyweight Pattern）&quot;&gt;&lt;/a&gt;享元模式（Flyweight Pattern）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;享元模式（Flyweight Pattern）：&lt;/strong&gt;属于对象的结构模式。运用共享技术有效地支持大量细粒度的对象。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;享元模式UML图&quot;&gt;&lt;a href=&quot;#享元模式UML图&quot; class=&quot;headerlink&quot; title=&quot;享元模式UML图&quot;&gt;&lt;/a&gt;享元模式UML图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/flyweight-pattern.jpg&quot; alt=&quot;flyweight-pattern.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://alexpdh.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="结构型模式" scheme="http://alexpdh.com/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（二十二）：中介者模式</title>
    <link href="http://alexpdh.com/2017/08/13/mediator-pattern/"/>
    <id>http://alexpdh.com/2017/08/13/mediator-pattern/</id>
    <published>2017-08-12T17:57:10.000Z</published>
    <updated>2017-09-26T09:51:40.868Z</updated>
    
    <content type="html"><![CDATA[<h4 id="中介者模式（Mediator-Pattern）"><a href="#中介者模式（Mediator-Pattern）" class="headerlink" title="中介者模式（Mediator Pattern）"></a>中介者模式（Mediator Pattern）</h4><p><strong>中介者模式（Mediator Pattern）：</strong>属于对象的行为模式。又叫调停者模式，用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变他们之间的交互。</p><hr><h4 id="中介者模式UML图"><a href="#中介者模式UML图" class="headerlink" title="中介者模式UML图"></a>中介者模式UML图</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/mediator-pattern.jpg" alt="mediator-pattern.jpg"><br><a id="more"></a></p><hr><h4 id="中介者模式涉及的角色"><a href="#中介者模式涉及的角色" class="headerlink" title="中介者模式涉及的角色"></a>中介者模式涉及的角色</h4><p><strong>抽象中介者（Mediator）角色：</strong>定义了同事对象到中介者对象的接口。<br><strong>具体中介者（ConcreteMediator）角色：</strong>实现抽象类的方法，它需要知道所有具体同事类，并从具体同事接收消息，向具体同事对象发出命令。<br><strong>抽象同事（Colleague）角色：</strong>定义出中介者到同事对象的接口。同事对象只知道中介者而不知道其余的同事对象。<br><strong>具体同事（ConcreteColleague）角色：</strong>每个具体同事只知道自己的行为，而不了解其它同事类的情况，但它们却都认识中介者对象。</p><hr><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p><strong>抽象中介者类 Mediator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.mediatorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 中介者模式：中介者抽象类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-13 2:46</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 同事对象在自身发生改变的时候来通知中介者方法</div><div class="line">   * 让中介者来负责与其它同事对象的交互</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> messge 消息</div><div class="line">   * <span class="doctag">@param</span> colleague 同事对象</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String messge, Colleague colleague)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>抽象同事类 Colleague</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.mediatorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 中介者模式：抽象同事类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-13 2:48</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 持有一个中介者对象</span></div><div class="line">  <span class="keyword">protected</span> Mediator mediator;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mediator = mediator;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体同事类A ConcreteColleagueA</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.mediatorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 中介者模式：具体同事类A</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-13 2:52</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleagueA</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleagueA</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(mediator);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 发送消息</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> messge</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String messge)</span> </span>&#123;</div><div class="line">    mediator.send(messge,<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 获取消息</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> message</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"同事A得到消息："</span> + message);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体同事类B ConcreteColleagueB</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.mediatorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 中介者模式：具体同事类B</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-13 3:04</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleagueB</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleagueB</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(mediator);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 发送消息</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> messge</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String messge)</span> </span>&#123;</div><div class="line">    mediator.send(messge,<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 获取消息</div><div class="line">   *</div><div class="line">   * <span class="doctag">@param</span> message</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"同事B得到消息："</span> + message);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端测试类 MediatorPatternTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.mediatorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 中介者模式：客户端测试类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-13 3:14</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediatorPatternTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    ConcreteMediator mediator = <span class="keyword">new</span> ConcreteMediator();</div><div class="line">    <span class="comment">// 使同事对象持有中介者对象</span></div><div class="line">    ConcreteColleagueA colleagueA = <span class="keyword">new</span> ConcreteColleagueA(mediator);</div><div class="line">    ConcreteColleagueB colleagueB = <span class="keyword">new</span> ConcreteColleagueB(mediator);</div><div class="line"></div><div class="line">    <span class="comment">// 使中介者持有并维护两个同事类</span></div><div class="line">    mediator.setColleagueA(colleagueA);</div><div class="line">    mediator.setColleagueB(colleagueB);</div><div class="line"></div><div class="line">    colleagueA.send(<span class="string">"吃过饭了吗？"</span>);</div><div class="line">    colleagueB.send(<span class="string">"没有呢"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="中介者模式的优点"><a href="#中介者模式的优点" class="headerlink" title="中介者模式的优点"></a>中介者模式的优点</h4><ul><li>松散耦合</li></ul><blockquote><p>中介者模式通过把多个同事对象之间的交互封装到中介者对象里面，从而使得同事对象之间松散耦合，基本上可以做到互补依赖。这样一来，同事对象就可以独立地变化和复用，而不再像以前那样“牵一处而动全身”了。</p></blockquote><ul><li>集中控制交互</li></ul><blockquote><p>多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只需要修改中介者对象就可以了，当然如果是已经做好的系统，那么就扩展中介者对象，而各个同事类不需要做修改。</p></blockquote><ul><li>多对多变成一对多</li></ul><blockquote><p>没有使用中介者模式的时候，同事对象之间的关系通常是多对多的，引入中介者对象以后，中介者对象和同事对象的关系通常变成双向的一对多，这会让对象的关系更容易理解和实现。</p></blockquote><hr><h4 id="中介者模式的缺点"><a href="#中介者模式的缺点" class="headerlink" title="中介者模式的缺点"></a>中介者模式的缺点</h4><blockquote><p>调停者模式的一个潜在缺点是，过度集中化。如果同事对象的交互非常多，而且比较复杂，当这些复杂性全部集中到调停者的时候，会导致调停者对象变得十分复杂，而且难于管理和维护。</p></blockquote><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">大话设计模式</span></li><li><a href="http://www.cnblogs.com/java-my-life" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.cnblogs.com/java-my-life</span></a></li><li><a href="https://github.com/alexpdh/bigTalkDesignPattenSample" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">源码地址：https://github.com/alexpdh/bigTalkDesignPattenSample</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;中介者模式（Mediator-Pattern）&quot;&gt;&lt;a href=&quot;#中介者模式（Mediator-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;中介者模式（Mediator Pattern）&quot;&gt;&lt;/a&gt;中介者模式（Mediator Pattern）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;中介者模式（Mediator Pattern）：&lt;/strong&gt;属于对象的行为模式。又叫调停者模式，用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变他们之间的交互。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;中介者模式UML图&quot;&gt;&lt;a href=&quot;#中介者模式UML图&quot; class=&quot;headerlink&quot; title=&quot;中介者模式UML图&quot;&gt;&lt;/a&gt;中介者模式UML图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/mediator-pattern.jpg&quot; alt=&quot;mediator-pattern.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://alexpdh.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="行为型模式" scheme="http://alexpdh.com/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（二十一）：职责链模式</title>
    <link href="http://alexpdh.com/2017/08/12/chain-of-responsibility-pattern/"/>
    <id>http://alexpdh.com/2017/08/12/chain-of-responsibility-pattern/</id>
    <published>2017-08-12T05:49:45.000Z</published>
    <updated>2017-09-26T09:51:40.807Z</updated>
    
    <content type="html"><![CDATA[<h4 id="职责链模式（Chain-Of-Responsibility-Pattern）"><a href="#职责链模式（Chain-Of-Responsibility-Pattern）" class="headerlink" title="职责链模式（Chain Of Responsibility Pattern）"></a>职责链模式（Chain Of Responsibility Pattern）</h4><p><strong>职责链模式（Chain Of Responsibility Pattern）：</strong>属于对象的行为模式。使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><hr><h4 id="职责链模式UML图"><a href="#职责链模式UML图" class="headerlink" title="职责链模式UML图"></a>职责链模式UML图</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/chain-of-responsibility-pattern.jpg" alt="chain-of-responsibility-pattern.jpg"><br><a id="more"></a></p><hr><h4 id="职责链模式涉及的角色"><a href="#职责链模式涉及的角色" class="headerlink" title="职责链模式涉及的角色"></a>职责链模式涉及的角色</h4><p><strong>抽象处理者（Handler）角色：</strong>定义出一个处理请求的接口。如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。这个角色通常由一个Java抽象类或者Java接口实现。上图中Handler类的聚合关系给出了具体子类对下家的引用，抽象方法handleRequest()规范了子类处理请求的操作。<br><strong>具体处理者(ConcreteHandler)角色：</strong>处理它所负责的请求，由于持有对下家的引用，所以可以访问它的后继者，如果可以处理该请求，就处理之，否则将该请求转发给它的后继者。</p><hr><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p><strong>抽象处理者 Handler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.chainOfResponsebilityPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 职责链模式：抽象处理者</div><div class="line"> *</div><div class="line"> * 定义出一个处理请求的接口。如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。</div><div class="line"> * 这个角色通常由一个Java抽象类或者Java接口实现。上图中Handler类的聚合关系给出了具体子类对下家的引用，</div><div class="line"> * 抽象方法handleRequest()规范了子类处理请求的操作。</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-12 14:05</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">protected</span> Handler successor;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 持有对下家的引用</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Handler successor)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.successor = successor;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 请求处理</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(<span class="keyword">int</span> request)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体处理者类 A ConcreteHandlerA</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.chainOfResponsebilityPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 职责链模式：具体处理者类 A</div><div class="line"> *</div><div class="line"> * 处理它所负责的请求，由于持有对下家的引用，所以可以访问它的后继者，</div><div class="line"> * 如果可以处理该请求，就处理之，否则将该请求转发给它的后继者。</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-12 14:10</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandlerA</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(<span class="keyword">int</span> request)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (request &gt;= <span class="number">0</span> &amp;&amp; request &lt; <span class="number">10</span>) &#123;</div><div class="line">      System.out.println(<span class="string">"处理 0-10 请求"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      successor.handlerRequest(request); <span class="comment">// 转移到后继者类处理</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体处理者类 B ConcreteHandlerB</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.chainOfResponsebilityPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 职责链模式：具体处理者类 B</div><div class="line"> *</div><div class="line"> * 处理它所负责的请求，由于持有对下家的引用，所以可以访问它的后继者，</div><div class="line"> * 如果可以处理该请求，就处理之，否则将该请求转发给它的后继者。</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-12 14:17</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandlerB</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(<span class="keyword">int</span> request)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (request &gt;= <span class="number">10</span> &amp;&amp; request &lt; <span class="number">20</span>) &#123;</div><div class="line">      System.out.println(<span class="string">"处理 10-20 的请求"</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      successor.handlerRequest(request); <span class="comment">// 转移到后继者类处理</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端测试类 ChainOfResponsibilityPatternTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.chainOfResponsebilityPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 职责链模式：客户端测试类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-12 14:21</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainOfResponsibilityPatternTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Handler h1 = <span class="keyword">new</span> ConcreteHandlerA();</div><div class="line">    Handler h2 = <span class="keyword">new</span> ConcreteHandlerB();</div><div class="line">    <span class="comment">// 持有一个对后继者的引用</span></div><div class="line">    h1.setSuccessor(h2);</div><div class="line"></div><div class="line">    <span class="keyword">int</span>[] arrays = &#123;<span class="number">1</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">11</span>&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> request : arrays) &#123;</div><div class="line">      h1.handlerRequest(request);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="职责链模式的优点"><a href="#职责链模式的优点" class="headerlink" title="职责链模式的优点"></a>职责链模式的优点</h4><p>客户端提交请求后，请求是沿着链传递直到有一个具体处理者对象处理它，这样做的好处是客户端可以不用管请求由哪个对象来处理。这使得接收者和发送者都没有对方的明确信息，且链中的对象自己也并不知道链的结构，结构是职责链可以简化对象的相互连接，它们只需保持一个对后继者的引用，而不需要保持它的所有候选接收者。从而大大降低了耦合度。但是也要注意的是职责链模式的具体处理是有末端的，也就是说会有请求得不到处理的情况，所以客户端在发送请求的时候需要注意是否有对应的具体处理者不能处理的情况。</p><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">大话设计模式</span></li><li><a href="http://www.cnblogs.com/java-my-life" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.cnblogs.com/java-my-life</span></a></li><li><a href="https://github.com/alexpdh/bigTalkDesignPattenSample" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">源码地址：https://github.com/alexpdh/bigTalkDesignPattenSample</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;职责链模式（Chain-Of-Responsibility-Pattern）&quot;&gt;&lt;a href=&quot;#职责链模式（Chain-Of-Responsibility-Pattern）&quot; class=&quot;headerlink&quot; title=&quot;职责链模式（Chain Of Responsibility Pattern）&quot;&gt;&lt;/a&gt;职责链模式（Chain Of Responsibility Pattern）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;职责链模式（Chain Of Responsibility Pattern）：&lt;/strong&gt;属于对象的行为模式。使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;职责链模式UML图&quot;&gt;&lt;a href=&quot;#职责链模式UML图&quot; class=&quot;headerlink&quot; title=&quot;职责链模式UML图&quot;&gt;&lt;/a&gt;职责链模式UML图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/chain-of-responsibility-pattern.jpg&quot; alt=&quot;chain-of-responsibility-pattern.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://alexpdh.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="行为型模式" scheme="http://alexpdh.com/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（二十）：命令模式</title>
    <link href="http://alexpdh.com/2017/08/01/command-pattern/"/>
    <id>http://alexpdh.com/2017/08/01/command-pattern/</id>
    <published>2017-08-01T13:49:10.000Z</published>
    <updated>2017-09-26T09:51:40.809Z</updated>
    
    <content type="html"><![CDATA[<h4 id="命令模式（command-pattern）"><a href="#命令模式（command-pattern）" class="headerlink" title="命令模式（command pattern）"></a>命令模式（command pattern）</h4><p><strong>命令模式（command pattern）：</strong>属于对象的行为模式。将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销操作。</p><hr><h4 id="命令模式UML图"><a href="#命令模式UML图" class="headerlink" title="命令模式UML图"></a>命令模式UML图</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/command-pattern.jpg" alt="command-pattern"><br><a id="more"></a></p><hr><h4 id="命令模式涉及的角色"><a href="#命令模式涉及的角色" class="headerlink" title="命令模式涉及的角色"></a>命令模式涉及的角色</h4><p><strong>客户端(Client)角色：</strong>创建一个具体命令(ConcreteCommand)对象并确定其接收者。<br><strong>命令(Command)角色：</strong>声明了一个给所有具体命令类的抽象接口。<br><strong>具体命令(ConcreteCommand)角色：</strong>定义一个接收者和行为之间的弱耦合；实现execute()方法，负责调用接收者的相应操作。execute()方法通常叫做执行方法。<br><strong>请求者(Invoker)角色：</strong>负责调用命令对象执行请求，相关的方法叫做行动方法。<br><strong>接收者(Receiver)角色：</strong>负责具体实施和执行一个请求。任何一个类都可以成为接收者，实施和执行请求的方法叫做行动方法。</p><hr><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p><strong>接收者类 Receiver</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.commandPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 命令模式：接收者类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-01 22:19</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 真正执行命令相应的操作</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"执行请求操作！"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>命令接口 Command</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.commandPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 命令模式：命令接口</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-01 22:23</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 执行命令请求</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体命令类 ConcreteCommand</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.commandPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 命令模式：具体命令类</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-01 22:25</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 持有相应的接收者对象</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> Receiver receiver;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.receiver = receiver;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//通常会转调接收者对象的相应方法，让接收者来真正执行功能</span></div><div class="line">    receiver.action();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>请求者类 Invoker</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.commandPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 命令模式：请求者类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-01 22:27</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 命令对象</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> Command command;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">(Command command)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.command = command;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 行动方法</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</div><div class="line">    command.execute();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端测试类 CommandPatternTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.commandPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 命令模式：客户端测试类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-08-01 22:29</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandPatternTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Receiver receiver = <span class="keyword">new</span> Receiver();</div><div class="line">    Command command = <span class="keyword">new</span> ConcreteCommand(receiver);</div><div class="line">    Invoker invoker = <span class="keyword">new</span> Invoker(command);</div><div class="line">    invoker.action();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="命令模式的优点"><a href="#命令模式的优点" class="headerlink" title="命令模式的优点"></a>命令模式的优点</h4><ul><li>松散的耦合</li></ul><blockquote><p>命令模式使得发起命令的对象——客户端，和具体实现命令的对象——接收者对象完全解耦，也就是说发起命令的对象完全不知道具体实现对象是谁，也不知道如何实现。</p></blockquote><ul><li>动态的控制</li></ul><blockquote><p>命令模式把请求封装起来，可以动态地对它进行参数化、队列化和日志化等操作，从而使得系统更灵活。</p></blockquote><ul><li>很自然的复合命令</li></ul><blockquote><p>命令模式中的命令对象能够很容易地组合成复合命令，也就是宏命令，从而使系统操作更简单，功能更强大。</p></blockquote><ul><li>更好的扩展性</li></ul><blockquote><p>由于发起命令的对象和具体的实现完全解耦，因此扩展新的命令就很容易，只需要实现新的命令对象，然后在装配的时候，把具体的实现对象设置到命令对象中，然后就可以使用这个命令对象，已有的实现完全不用变化。</p></blockquote><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">大话设计模式</span></li><li><a href="http://www.cnblogs.com/java-my-life" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.cnblogs.com/java-my-life</span></a></li><li><a href="https://github.com/alexpdh/bigTalkDesignPattenSample" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">源码地址：https://github.com/alexpdh/bigTalkDesignPattenSample</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;命令模式（command-pattern）&quot;&gt;&lt;a href=&quot;#命令模式（command-pattern）&quot; class=&quot;headerlink&quot; title=&quot;命令模式（command pattern）&quot;&gt;&lt;/a&gt;命令模式（command pattern）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;命令模式（command pattern）：&lt;/strong&gt;属于对象的行为模式。将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销操作。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;命令模式UML图&quot;&gt;&lt;a href=&quot;#命令模式UML图&quot; class=&quot;headerlink&quot; title=&quot;命令模式UML图&quot;&gt;&lt;/a&gt;命令模式UML图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/command-pattern.jpg&quot; alt=&quot;command-pattern&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://alexpdh.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="行为型模式" scheme="http://alexpdh.com/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十九）：桥接模式</title>
    <link href="http://alexpdh.com/2017/07/30/birdge-pattern/"/>
    <id>http://alexpdh.com/2017/07/30/birdge-pattern/</id>
    <published>2017-07-30T14:20:47.000Z</published>
    <updated>2017-09-26T09:51:40.802Z</updated>
    
    <content type="html"><![CDATA[<h4 id="桥接模式（bridge-pattern）"><a href="#桥接模式（bridge-pattern）" class="headerlink" title="桥接模式（bridge pattern）"></a>桥接模式（bridge pattern）</h4><p><strong>桥接模式（bridge pattern）：</strong>属于对象的结构型模式。将抽象部分与它的实现部分分离，使它们都可以独立地变化。</p><hr><h4 id="桥接模式UML图"><a href="#桥接模式UML图" class="headerlink" title="桥接模式UML图"></a>桥接模式UML图</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/bridge-pattern.jpg" alt="bridge-pattern"></p><p>由图可看出，系统包含了两个等级结构</p><ol><li>由抽象化角色和被提炼的抽象化角色组成的抽象化等级结构</li><li>由实现化角色和两个具体的实现化角色组成的实现化等级结构</li></ol><a id="more"></a><hr><h4 id="桥接模式涉及的角色"><a href="#桥接模式涉及的角色" class="headerlink" title="桥接模式涉及的角色"></a>桥接模式涉及的角色</h4><p><strong>抽象化（Abstraction）角色：</strong>抽象化给出的定义，并保存一个对实现化对象的引用。<br><strong>被提炼的抽象化（RefineAbstraction）角色：</strong>扩展抽象化角色，改变和修正父类对抽象化的定义。<br><strong>实现化（Implementor）角色：</strong>这个角色给出实现化角色的接口，但不给出具体的实现。<br><strong>具体实现化（ConcreteImplementor）角色：</strong>这个角色给出实现化角色接口的具体实现。</p><hr><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p><strong>实现化抽象类 Implementor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.bridge;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 桥接模式：实现化抽象类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-30 23:32</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 实现抽象部分需要的某些具体功能</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operationImpl</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体实现 A 类 ImplementorA</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.bridge;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 桥接模式：具体实现 A 类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-30 23:41</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplementorA</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationImpl</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"具体实现 A 方法执行！"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体实现 B 类 ImplementorB</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.bridge;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 桥接模式：具体实现 B 类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-30 23:42</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplementorB</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationImpl</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"具体实现 B 方法执行！"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>抽象化类 Abstraction</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.bridge;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 桥接模式：抽象化类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-30 23:34</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</div><div class="line">  <span class="keyword">protected</span> Implementor impl;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">Abstraction</span><span class="params">(Implementor impl)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.impl = impl;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>被提炼的抽象化类 RefinedAbstraction</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.bridge;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 桥接模式：被提炼的抽象化类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-30 23:36</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">RefinedAbstraction</span><span class="params">(Implementor impl)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(impl);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</div><div class="line">    impl.operationImpl();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端测试类 BridgePatternTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.bridge;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 桥接模式：客户端测试类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-30 23:43</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgePatternTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Abstraction ab1 = <span class="keyword">new</span> RefinedAbstraction(<span class="keyword">new</span> ImplementorA());</div><div class="line">    ab1.operation();</div><div class="line">    Abstraction ab2 = <span class="keyword">new</span> RefinedAbstraction(<span class="keyword">new</span> ImplementorB());</div><div class="line">    ab2.operation();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="桥梁模式的优点"><a href="#桥梁模式的优点" class="headerlink" title="桥梁模式的优点"></a>桥梁模式的优点</h4><ul><li>将抽象部分与它的实现部分分离</li></ul><blockquote><p>桥梁模式分离了抽象部分和实现部分，即实现系统可能有多种角度分类，每一种分类都有可能变化，那么就把这种多角度分离出来让它们独立变化，减少它们之间的耦合。</p></blockquote><ul><li>更好的扩展性</li></ul><blockquote><p>桥梁模式更好的利用了合成/聚合复用原则，使得抽象部分和实现部分可以分别独立地扩展，而不会相互影响，从而大大提高了系统的可扩展性。</p></blockquote><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">大话设计模式</span></li><li><a href="http://www.cnblogs.com/java-my-life" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.cnblogs.com/java-my-life</span></a></li><li><a href="https://github.com/alexpdh/bigTalkDesignPattenSample" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">源码地址：https://github.com/alexpdh/bigTalkDesignPattenSample</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;桥接模式（bridge-pattern）&quot;&gt;&lt;a href=&quot;#桥接模式（bridge-pattern）&quot; class=&quot;headerlink&quot; title=&quot;桥接模式（bridge pattern）&quot;&gt;&lt;/a&gt;桥接模式（bridge pattern）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;桥接模式（bridge pattern）：&lt;/strong&gt;属于对象的结构型模式。将抽象部分与它的实现部分分离，使它们都可以独立地变化。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;桥接模式UML图&quot;&gt;&lt;a href=&quot;#桥接模式UML图&quot; class=&quot;headerlink&quot; title=&quot;桥接模式UML图&quot;&gt;&lt;/a&gt;桥接模式UML图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/bridge-pattern.jpg&quot; alt=&quot;bridge-pattern&quot;&gt;&lt;/p&gt;
&lt;p&gt;由图可看出，系统包含了两个等级结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;由抽象化角色和被提炼的抽象化角色组成的抽象化等级结构&lt;/li&gt;
&lt;li&gt;由实现化角色和两个具体的实现化角色组成的实现化等级结构&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://alexpdh.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="结构型模式" scheme="http://alexpdh.com/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十八）：单例模式</title>
    <link href="http://alexpdh.com/2017/07/30/singleton-pattern/"/>
    <id>http://alexpdh.com/2017/07/30/singleton-pattern/</id>
    <published>2017-07-29T17:44:06.000Z</published>
    <updated>2017-09-26T09:51:40.885Z</updated>
    
    <content type="html"><![CDATA[<h4 id="单例模式（singleton-pattern）"><a href="#单例模式（singleton-pattern）" class="headerlink" title="单例模式（singleton pattern）"></a>单例模式（singleton pattern）</h4><p><strong>单例模式（singleton pattern）：</strong>属于对象的创建型模式。保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><hr><h4 id="单例模式UML图"><a href="#单例模式UML图" class="headerlink" title="单例模式UML图"></a>单例模式UML图</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/singleton-pattern.jpg" alt="singleton-pattern"><br><a id="more"></a></p><hr><h4 id="单例模式特点"><a href="#单例模式特点" class="headerlink" title="单例模式特点"></a>单例模式特点</h4><ul><li>单例类只能实例化一次。</li><li>单例类需要自己创建自己的唯一实例。</li><li>单例类需要提供一个给其它对象访问该唯一实例的方法。</li></ul><hr><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><h5 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package com.example.singletonPattern;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 单例模式：饿汉式</div><div class="line"> *</div><div class="line"> * @author pengdh</div><div class="line"> * @date: 2017-07-30 1:58</div><div class="line"> */</div><div class="line">public class EagerSingleton &#123;</div><div class="line">  private static EagerSingleton instance = new EagerSingleton();</div><div class="line"></div><div class="line">  /**</div><div class="line">   * 私有构造器</div><div class="line">   */</div><div class="line">  private EagerSingleton()&#123;&#125;</div><div class="line"></div><div class="line">  /**</div><div class="line">   * 静态工厂方法，获取全局唯一实例</div><div class="line">   * @return</div><div class="line">   */</div><div class="line">  public static EagerSingleton getInstance () &#123;</div><div class="line">    return instance;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>如上示例中，当类第一次加载时就会初始化静态变量 instance ，此时就会调用类的私有构造器，这时就创建出了单例类的唯一实例。<strong>饿汉式是典型的空间换时间</strong>，当类装载的时候就会创建类的实例，不管你用不用，先创建出来，然后每次调用的时候，就不需要再判断，节省了运行时间。</p></blockquote><h5 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.singletonPattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 单例模式：懒汉式</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-30 2:08</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 私有构造器</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 静态工厂方法，获取全局唯一实例</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    lock.lock();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">        instance = <span class="keyword">new</span> LazySingleton();</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      lock.unlock();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>如上示例中，当单例类加载时不会立刻创建对象的实例，而是在调用类的静态工厂方法时才创建对象的唯一实例，我们在获取实例的静态方法中使用了锁，这样做的目的是防止在多线程环境下多个对象同时调用静态工厂方法时出现并发问题。<strong>懒汉式是典型的时间换空间</strong>,就是每次获取实例都会进行判断，看是否需要创建实例，浪费判断的时间。当然，如果一直没有人使用的话，那就不会创建实例，则节约内存空间。</p></blockquote><h5 id="双重检查加锁"><a href="#双重检查加锁" class="headerlink" title="双重检查加锁"></a>双重检查加锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.singletonPattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 单例模式：双重检查加锁</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-30 2:36</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckSingleton</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> DoubleCheckSingleton instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 私有构造器</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckSingleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 静态工厂方法，获取全局唯一实例</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 先检查实例是否存在，如果不存在才进入下面的同步块</span></div><div class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">// 加锁，线程安全的创建实例</span></div><div class="line">      Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">      lock.lock();</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 再次检查实例是否存在，如果不存在才真正的创建实例</span></div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">          instance = <span class="keyword">new</span> DoubleCheckSingleton();</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> instance;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>如上示例使用了“双重检查加锁”的方式实现，既实现线程安全，又能够使性能不受很大的影响。所谓“双重检查加锁”机制，指的是：并不是每次进入getInstance方法都需要同步，而是先不同步，进入方法后，先检查实例是否存在，如果不存在才进行下面的同步块，这是第一重检查，进入同步块过后，再次检查实例是否存在，如果不存在，就在同步的情况下创建一个实例，这是第二重检查。这样一来，就只需要同步一次了，从而减少了多次在同步情况下进行判断所浪费的时间。</p></blockquote><h5 id="Lazy-initialization-holder-class模式"><a href="#Lazy-initialization-holder-class模式" class="headerlink" title="Lazy initialization holder class模式"></a>Lazy initialization holder class模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.singletonPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 单例模式：Lazy initialization holder class模式</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-30 2:46</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 私有构造器</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 类级的内部类，也就是静态的成员式内部类，该内部类的实例与外部类的实例</div><div class="line">   * 没有绑定关系，而且只有被调用到时才会装载，从而实现了延迟加载。</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 静态初始化器，由JVM来保证线程安全</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 静态工厂方法，获取全局唯一实例</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> SingletonHolder.instance;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>如上示例中，当getInstance方法第一次被调用的时候，它第一次读取SingletonHolder.instance，导致 SingletonHolder 类得到初始化；而这个类在装载并被初始化的时候，会初始化它的静态域，从而创建 LazyHolderSingleton 的实例，由于是静态的域，因此只会在虚拟机装载类的时候初始化一次，并由虚拟机来保证它的线程安全性。这个模式的优势在于，getInstance方法并没有被同步，并且只是执行一个域的访问，因此延迟初始化并没有增加任何访问成本。</p></blockquote><h5 id="单例和枚举"><a href="#单例和枚举" class="headerlink" title="单例和枚举"></a>单例和枚举</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.singletonPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 单例模式：使用枚举来实现单例模式</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-30 2:58</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 定义一个枚举的元素，它就代表了 SingletonEnum 的一个实例。</div><div class="line">   */</div><div class="line">  uniqueInstance;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 单例可以有自己的操作</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 功能实现</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>使用枚举来实现单实例控制会更加简洁，而且无偿地提供了序列化机制，并由JVM从根本上提供保障，绝对防止多次实例化，是更简洁、高效、安全的实现单例的方式。</p></blockquote><h5 id="客户端测试类"><a href="#客户端测试类" class="headerlink" title="客户端测试类"></a>客户端测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.singletonPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 单例模式：客户端测试类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-30 3:20</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    EagerSingleton eager1 = EagerSingleton.getInstance();</div><div class="line">    EagerSingleton eager2 = EagerSingleton.getInstance();</div><div class="line">    LazySingleton lazy1 = LazySingleton.getInstance();</div><div class="line">    LazySingleton lazy2 = LazySingleton.getInstance();</div><div class="line">    DoubleCheckSingleton double1 = DoubleCheckSingleton.getInstance();</div><div class="line">    DoubleCheckSingleton double2 = DoubleCheckSingleton.getInstance();</div><div class="line">    Singleton s1 = Singleton.getInstance();</div><div class="line">    Singleton s2 = Singleton.getInstance();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (eager1 == eager2) &#123;</div><div class="line">      System.out.println(<span class="string">"\"饿汉式单例模式\" 的两个对象是相等的！"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (lazy1 == lazy2) &#123;</div><div class="line">      System.out.println(<span class="string">"\"懒汉式单例模式\" 的两个对象是相等的！"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (double1 == double2) &#123;</div><div class="line">      System.out.println(<span class="string">"\"双重检查加锁模式单例模式\" 的两个对象是相等的！"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (s1 == s2) &#123;</div><div class="line">      System.out.println(<span class="string">"\"Lazy initialization holder class模式单例模式\" 的两个对象是相等的！"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">大话设计模式</span></li><li><a href="http://www.cnblogs.com/java-my-life" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.cnblogs.com/java-my-life</span></a></li><li><a href="https://github.com/alexpdh/bigTalkDesignPattenSample" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">源码地址：https://github.com/alexpdh/bigTalkDesignPattenSample</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;单例模式（singleton-pattern）&quot;&gt;&lt;a href=&quot;#单例模式（singleton-pattern）&quot; class=&quot;headerlink&quot; title=&quot;单例模式（singleton pattern）&quot;&gt;&lt;/a&gt;单例模式（singleton pattern）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;单例模式（singleton pattern）：&lt;/strong&gt;属于对象的创建型模式。保证一个类仅有一个实例，并提供一个访问它的全局访问点。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;单例模式UML图&quot;&gt;&lt;a href=&quot;#单例模式UML图&quot; class=&quot;headerlink&quot; title=&quot;单例模式UML图&quot;&gt;&lt;/a&gt;单例模式UML图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/singleton-pattern.jpg&quot; alt=&quot;singleton-pattern&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://alexpdh.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="创建型模式" scheme="http://alexpdh.com/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十七）：迭代器模式</title>
    <link href="http://alexpdh.com/2017/07/24/iterator-pattern/"/>
    <id>http://alexpdh.com/2017/07/24/iterator-pattern/</id>
    <published>2017-07-24T14:26:41.000Z</published>
    <updated>2017-09-26T14:52:18.287Z</updated>
    
    <content type="html"><![CDATA[<h4 id="迭代器模式（iterator-pattern）"><a href="#迭代器模式（iterator-pattern）" class="headerlink" title="迭代器模式（iterator pattern）"></a>迭代器模式（iterator pattern）</h4><p><strong>迭代器模式（iterator pattern）：</strong>属于对象的行为模式。提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。</p><hr><h4 id="迭代器模式UML图"><a href="#迭代器模式UML图" class="headerlink" title="迭代器模式UML图"></a>迭代器模式UML图</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/iterator-pattern.jpg" alt=""><br><a id="more"></a></p><hr><h4 id="迭代器模式涉及的角色"><a href="#迭代器模式涉及的角色" class="headerlink" title="迭代器模式涉及的角色"></a>迭代器模式涉及的角色</h4><p><strong>抽象迭代器（Iterator）角色：</strong>用于定义得到开始对象、得到下一个对象、判断是否到结尾、当前对象等抽象方法，统一接口。<br><strong>具体迭代器（ConcreteIterator）角色：</strong>继承 Iterator，实现开始、下一个、是否结尾、当前对象等方法。<br><strong>抽象聚集（Aggregate）角色：</strong>创建迭代器(Iterator)对象的。<br><strong>具体聚集（ConcreteAggregate）角色：</strong>实现了创建迭代器(Iterator)对象，返回一个合适的具体迭代子实例。</p><hr><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p><strong>迭代器抽象类 Iterator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.iteratorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 迭代器模式：迭代器抽象类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-24 23:10</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Iterator</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 移动到第一个元素</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 移动到下一个元素</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 判读是否为最后一个元素</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 返还当前元素</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">currentItem</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>聚集抽象类 Aggregate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.iteratorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 迭代器模式：聚集抽象类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-24 23:17</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Aggregate</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 工厂方法，创建相应迭代器对象的</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator <span class="title">createIterator</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体迭代器类 ConcreteIterator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.iteratorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 迭代器模式：具体迭代器类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-24 23:16</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">extends</span> <span class="title">Iterator</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//持有被迭代的具体的聚合对象</span></div><div class="line">  <span class="keyword">private</span> ConcreteAggregate agg;</div><div class="line">  <span class="comment">//内部索引，记录当前迭代到的索引位置</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">  <span class="comment">//记录当前聚集对象的大小</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ConcreteIterator</span><span class="params">(ConcreteAggregate agg)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.agg = agg;</div><div class="line">    <span class="keyword">this</span>.size = agg.size();</div><div class="line">    index = <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</div><div class="line">    index = <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &lt; size) &#123;</div><div class="line">      index++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (index &gt;= size);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">currentItem</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> agg.getElement(index);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>具体聚集类 ConcreteAggregate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.iteratorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 迭代器模式：具体聚集类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-24 23:20</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">extends</span> <span class="title">Aggregate</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> Object[] objArray = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 构造方法，传入聚合对象的具体内容</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ConcreteAggregate</span><span class="params">(Object[] objArray)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.objArray = objArray;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 取值方法：向外界提供聚集元素</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (index &lt; objArray.length) &#123;</div><div class="line">      <span class="keyword">return</span> objArray[index];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 取值方法：向外界提供聚集的大小</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> objArray.length;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端测试类 IteratorPatternTest</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.iteratorPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 迭代器模式：客户端测试类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-24 23:26</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorPatternTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Object[] objArray = &#123;<span class="string">"One"</span>, <span class="string">"Two"</span>, <span class="string">"Three"</span>, <span class="string">"Four"</span>, <span class="string">"Five"</span>, <span class="string">"Six"</span>&#125;;</div><div class="line">    <span class="comment">//创建聚合对象</span></div><div class="line">    Aggregate agg = <span class="keyword">new</span> ConcreteAggregate(objArray);</div><div class="line">    <span class="comment">//循环输出聚合对象中的值</span></div><div class="line">    Iterator it = agg.createIterator();</div><div class="line">    <span class="keyword">while</span> (!it.isDone()) &#123;</div><div class="line">      System.out.println(it.currentItem());</div><div class="line">      it.next();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">大话设计模式</span></li><li><a href="http://www.cnblogs.com/java-my-life" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.cnblogs.com/java-my-life</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;迭代器模式（iterator-pattern）&quot;&gt;&lt;a href=&quot;#迭代器模式（iterator-pattern）&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式（iterator pattern）&quot;&gt;&lt;/a&gt;迭代器模式（iterator pattern）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;迭代器模式（iterator pattern）：&lt;/strong&gt;属于对象的行为模式。提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;迭代器模式UML图&quot;&gt;&lt;a href=&quot;#迭代器模式UML图&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式UML图&quot;&gt;&lt;/a&gt;迭代器模式UML图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/iterator-pattern.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://alexpdh.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="行为型模式" scheme="http://alexpdh.com/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十六）：组合模式</title>
    <link href="http://alexpdh.com/2017/07/23/composite-pattern/"/>
    <id>http://alexpdh.com/2017/07/23/composite-pattern/</id>
    <published>2017-07-23T10:17:32.000Z</published>
    <updated>2017-09-26T09:51:40.811Z</updated>
    
    <content type="html"><![CDATA[<h4 id="组合模式（composite-pattern）"><a href="#组合模式（composite-pattern）" class="headerlink" title="组合模式（composite pattern）"></a>组合模式（composite pattern）</h4><p><strong>组合模式（composite pattern）：</strong>属于对象的结构型模式。将对象组合成树形结构以表示‘部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><hr><h4 id="组合模式UML图"><a href="#组合模式UML图" class="headerlink" title="组合模式UML图"></a>组合模式UML图</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/composite-pattern.jpg" alt="composite-pattern"><br><a id="more"></a></p><hr><h4 id="组合模式涉及的角色"><a href="#组合模式涉及的角色" class="headerlink" title="组合模式涉及的角色"></a>组合模式涉及的角色</h4><p><strong>抽象构件（Component）角色：</strong>组合中的对象声明接口，在适当情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理 Component 的子不部件<br><strong>树叶构件（Leaf）角色：</strong>在组合中表示叶节点对象，叶节点没有子节点<br><strong>树枝构件（Composite）角色：</strong>定义有枝节点行为，用来存储子部件，在 Component 接口中实现与子部件有关的操作，比如 增加 add 和删除 remove</p><hr><h4 id="组合模式的实现方式"><a href="#组合模式的实现方式" class="headerlink" title="组合模式的实现方式"></a>组合模式的实现方式</h4><ul><li>透明方式</li></ul><p>要求在 Component 中申明所有的管理方法，如： add 和 remove 方法，所有实现 Component 类的子类都实现了这些管理方法。这样做的好处是无论是树叶节点还是树枝节点对于外界是没有区别的，它们具备完全一致的行为接口。但问题也很明显，因为 树叶节点（Leaf）本身并不具备管理方法的功能，所以实现它是没有意义的。</p><ul><li>安全方式</li></ul><p>也就是在 Component 类中不去声明 add 和 remove 方法，那么子类的 Leaf 也就不需要去是实现它，而是在 Composite 类声明所有用来管理子类的对象的方法，这样做就不会出现透明方式的问题，不过由于不透明，所以树叶和树枝类将不具有相同的接口，客户端调用需要作出相应的判断，带来了不变。</p><p><strong>在组成模式中，建议多采用透明方式</strong></p><hr><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p><strong>抽象构建类 Component</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.compositePattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 组合模式：抽象构建类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-23 18:52</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">protected</span> String name;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Component</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 添加一个子部件对象</div><div class="line">   * <span class="doctag">@param</span> c</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 删除一个子部件对象</div><div class="line">   * <span class="doctag">@param</span> c</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 显示目录树</div><div class="line">   * <span class="doctag">@param</span> depth</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String depth)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>树叶构件类 Leaf</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.compositePattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 组合模式：树叶构件类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-23 18:59</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(name);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String depth)</span> </span>&#123;</div><div class="line">    System.out.println(depth + <span class="string">" "</span> + name);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>树枝构件类 Composite</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.compositePattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 组合模式：树枝构件类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-23 19:10</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> List&lt;Component&gt; childrenComopnents = <span class="keyword">new</span> ArrayList&lt;Component&gt;();</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Composite</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(name);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123;</div><div class="line">    childrenComopnents.add(c);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123;</div><div class="line">    childrenComopnents.remove(c);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String depth)</span> </span>&#123;</div><div class="line">    System.out.println(depth + <span class="string">" "</span> + name);</div><div class="line">    depth += <span class="string">"+"</span>;</div><div class="line">    <span class="keyword">for</span> (Component component : childrenComopnents) &#123;</div><div class="line">      component.display(depth);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端测试类 TestCompositePattern</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.compositePattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 组合模式：客户端测试类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-23 19:16</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCompositePattern</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="comment">// 添加根节点</span></div><div class="line">    Composite root = <span class="keyword">new</span> Composite(<span class="string">"root"</span>);</div><div class="line">    <span class="comment">// 根节点上添加叶子节点</span></div><div class="line">    root.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf A"</span>));</div><div class="line">    root.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf B"</span>));</div><div class="line"></div><div class="line">    <span class="comment">// 添加树枝节点</span></div><div class="line">    Composite comp = <span class="keyword">new</span> Composite(<span class="string">"Composite X"</span>);</div><div class="line">    <span class="comment">// 树枝节点上添加叶子节点</span></div><div class="line">    comp.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf XA"</span>));</div><div class="line">    comp.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf XB"</span>));</div><div class="line">    <span class="comment">// 将树枝节点添加到根节点</span></div><div class="line">    root.add(comp);</div><div class="line"></div><div class="line">    Composite comp2 = <span class="keyword">new</span> Composite(<span class="string">"Composite XY"</span>);</div><div class="line">    comp2.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf XYA"</span>));</div><div class="line">    comp2.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf XYB"</span>));</div><div class="line">    root.add(comp2);</div><div class="line"></div><div class="line">    root.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf C"</span>));</div><div class="line"></div><div class="line">    Leaf leaf = <span class="keyword">new</span> Leaf(<span class="string">"D"</span>);</div><div class="line">    root.add(leaf);</div><div class="line">    root.remove(leaf);</div><div class="line"></div><div class="line">    root.display(<span class="string">"+"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">大话设计模式</span></li><li><a href="http://www.cnblogs.com/java-my-life" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.cnblogs.com/java-my-life</span></a></li><li><a href="https://github.com/alexpdh/bigTalkDesignPattenSample" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">源码地址：https://github.com/alexpdh/bigTalkDesignPattenSample</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;组合模式（composite-pattern）&quot;&gt;&lt;a href=&quot;#组合模式（composite-pattern）&quot; class=&quot;headerlink&quot; title=&quot;组合模式（composite pattern）&quot;&gt;&lt;/a&gt;组合模式（composite pattern）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;组合模式（composite pattern）：&lt;/strong&gt;属于对象的结构型模式。将对象组合成树形结构以表示‘部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;组合模式UML图&quot;&gt;&lt;a href=&quot;#组合模式UML图&quot; class=&quot;headerlink&quot; title=&quot;组合模式UML图&quot;&gt;&lt;/a&gt;组合模式UML图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/composite-pattern.jpg&quot; alt=&quot;composite-pattern&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://alexpdh.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="结构型模式" scheme="http://alexpdh.com/tags/%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式（十五）：备忘录模式</title>
    <link href="http://alexpdh.com/2017/07/22/memento-pattern/"/>
    <id>http://alexpdh.com/2017/07/22/memento-pattern/</id>
    <published>2017-07-22T11:16:50.000Z</published>
    <updated>2017-09-26T09:51:40.871Z</updated>
    
    <content type="html"><![CDATA[<h4 id="备忘录模式（memento-pattern）"><a href="#备忘录模式（memento-pattern）" class="headerlink" title="备忘录模式（memento pattern）"></a>备忘录模式（memento pattern）</h4><p><strong>备忘录模式（memento pattern）：</strong>属于对象的行为模式，在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就将该对象恢复到原乡保存的状态。</p><hr><h4 id="备忘录模式UML图"><a href="#备忘录模式UML图" class="headerlink" title="备忘录模式UML图"></a>备忘录模式UML图</h4><p><img src="http://ojirj5wkr.bkt.clouddn.com/memento-pattern.jpg" alt="memento-pattern"><br><a id="more"></a></p><hr><h4 id="备忘录模式涉及的角色"><a href="#备忘录模式涉及的角色" class="headerlink" title="备忘录模式涉及的角色"></a>备忘录模式涉及的角色</h4><p><strong>发起人（Originator）角色：</strong>负责创建一个含有当前的内部状态的备忘录对象。并可使用备忘录恢复内部状态。<br><strong>备忘录角色（Memento）角色：</strong>负责存储 Originator 对象的内部状态，并可防止 Originator 以外的其它对象访问备忘录 Memento。备忘录包含两个等效的接口：</p><ul><li>窄接口：管理者（Caretaker）对象只能看到备忘录的窄接口（narrow interface），它只能将备忘录传递给其它对象。</li><li>宽接口：发起人（Originator）能够看到一个宽接口，允许它访问返回到先前状态所需的所有数据。</li></ul><p><strong>管理者角色（Caretaker）角色：</strong>负责保存好备忘录对象 Memento，不能对备忘录的内容进行操作或检查。</p><hr><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p><strong>发起人类 Originator</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.mementoPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 备忘录模式：发起人类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-22 20:02</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String state;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 创建备忘录，将当前需要保存的信息保存。</div><div class="line">   *</div><div class="line">   * <span class="doctag">@return</span> 一个新的备忘录对象</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 恢复备忘录，将发起人对象恢复到备忘录对象所记载的状态</div><div class="line">   * <span class="doctag">@param</span> memento</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.state = memento.getState();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 显示数据</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"state："</span> + state);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.state = state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>备忘录类 Memento</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.mementoPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 备忘录模式：备忘录类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-22 20:05</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> String state;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.state = state;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> state;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.state = state;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>管理者类 Caretaker</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.mementoPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 备忘录模式：管理者类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-22 20:05</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Memento memento;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> memento;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.memento = memento;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端测试类 TestMementoPattern</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.mementoPattern;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 备忘录模式：客户端测试类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-22 20:15</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMementoPattern</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Originator originator = <span class="keyword">new</span> Originator();</div><div class="line">    Caretaker caretaker = <span class="keyword">new</span> Caretaker();</div><div class="line">    <span class="comment">// 改变发起人对象状态</span></div><div class="line">    originator.setState(<span class="string">"On"</span>);</div><div class="line">    originator.show();</div><div class="line">    <span class="comment">// 创建备忘录对象</span></div><div class="line">    Memento memento = originator.createMemento();</div><div class="line">    <span class="comment">// 保存发起人状态</span></div><div class="line">    caretaker.setMemento(memento);</div><div class="line">    <span class="comment">// 改变发起人状态</span></div><div class="line">    originator.setState(<span class="string">"Off"</span>);</div><div class="line">    originator.show();</div><div class="line">    <span class="comment">// 恢复发起人状态</span></div><div class="line">    originator.restoreMemento(memento);</div><div class="line">    originator.show();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h4 id="备忘录模式使用场景"><a href="#备忘录模式使用场景" class="headerlink" title="备忘录模式使用场景"></a>备忘录模式使用场景</h4><p>备忘录模式比较适用于功能比较复杂的，但需要维护或记录属性历史的类，或者需要保存的属性只是众多熟悉中的一小部分时，Originator 可以根据保存的 Memento 信息还原到前一状态。</p><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><span style="color:red;font-size:14px;font-family:Microsoft YaHei;">大话设计模式</span></li><li><a href="http://www.cnblogs.com/java-my-life" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">http://www.cnblogs.com/java-my-life</span></a></li><li><a href="https://github.com/alexpdh/bigTalkDesignPattenSample" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">源码地址：https://github.com/alexpdh/bigTalkDesignPattenSample</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;备忘录模式（memento-pattern）&quot;&gt;&lt;a href=&quot;#备忘录模式（memento-pattern）&quot; class=&quot;headerlink&quot; title=&quot;备忘录模式（memento pattern）&quot;&gt;&lt;/a&gt;备忘录模式（memento pattern）&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;备忘录模式（memento pattern）：&lt;/strong&gt;属于对象的行为模式，在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就将该对象恢复到原乡保存的状态。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;备忘录模式UML图&quot;&gt;&lt;a href=&quot;#备忘录模式UML图&quot; class=&quot;headerlink&quot; title=&quot;备忘录模式UML图&quot;&gt;&lt;/a&gt;备忘录模式UML图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/memento-pattern.jpg&quot; alt=&quot;memento-pattern&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://alexpdh.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="行为型模式" scheme="http://alexpdh.com/tags/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>工作中一次使用 redis 存储操作数据的需求</title>
    <link href="http://alexpdh.com/2017/07/20/work-in-redis-use/"/>
    <id>http://alexpdh.com/2017/07/20/work-in-redis-use/</id>
    <published>2017-07-20T12:58:24.000Z</published>
    <updated>2017-09-26T09:51:40.910Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ojirj5wkr.bkt.clouddn.com/jbg.jpg" alt="jbg"></p><blockquote><p>好久没有更博了，这篇文章前段时间就应该记录的，无赖最近新项目加班太多，回到家已累成狗。实在不想动了，今天趁着要修改点东西回顾下之前处理逻辑记录下。其实感觉很多东西不用，不回顾很容易就忘记了。干我们这行更是这样。个人觉得经常记录写工作实践中遇到过的一些有意义的经历很有必要。说不定哪天就要你回来增加或者修改需求了呢。就像我现在这样的。这是一次工作中产品提的需求，自己的一次开发经历。</p></blockquote><a id="more"></a><hr><h4 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h4><blockquote><p>需求是这样的：数据分析师分析提取了一些用户常听的歌曲基本信息，这些数据来自两个不同地方的不同类型的数据，大概分三种类型，用户偏好的一些歌手下的热门歌曲；用户偏好的一些分类标签（如：流行、伤感…）下的热门歌曲；还有一个是另外一个部门分析出来的用户常听的歌曲信息。产品要求我们将这些数据整合到一起：1、根据客户端需要的条数返回的数据不同类型要按不同比例响应，2、每种类型的歌曲要按歌曲热度排名显示。然后提供接口给其他平台调用获取用户偏好歌曲 top 信息。数据分析给的数据只包歌曲的基本信息，我们需要根据这些基本信息如歌曲id查询出歌曲的试听相关的完整信息。用户量大概是500w左右，每个月都会有更新。首先是给一个做微信网页推荐的平台展示并试听。因为数据比较大，而且要求我们接口响应速度要在1秒左右。因为分析送过来的数据本来就是属于热度数据，所以必须要所有数据都能快速提供到。</p></blockquote><hr><h4 id="需求开发"><a href="#需求开发" class="headerlink" title="需求开发"></a>需求开发</h4><blockquote><p>我基于目前系统的架构，计划把 redis 作为数据存储，先把分析的数据整合同步到redis上，然后提供接口直接从 redis 取来提高响应速度。我们的 redis 是一个10台服务器的集群，5 master 和 5 slave。客户端使用 spring 和 jedis 整合的。</p></blockquote><p><strong>sping 配置文件</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" </div><div class="line">xmlns:context="http://www.springframework.org/schema/context"</div><div class="line">xmlns:util="http://www.springframework.org/schema/util"</div><div class="line">xmlns:cache="http://www.springframework.org/schema/cache"</div><div class="line">xsi:schemaLocation="http://www.springframework.org/schema/beans </div><div class="line">http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">http://www.springframework.org/schema/context</div><div class="line">          http://www.springframework.org/schema/context/spring-context-3.0.xsd</div><div class="line">          http://www.springframework.org/schema/util</div><div class="line">   http://www.springframework.org/schema/util/spring-util-3.0.xsd</div><div class="line">   http://www.springframework.org/schema/cache</div><div class="line">           http://www.springframework.org/schema/cache/spring-cache.xsd"&gt;</div><div class="line">&lt;!-- 加载配置属性文件 --&gt;</div><div class="line">&lt;context:property-placeholder ignore-unresolvable="true" location="classpath:redis/redis-cluster.properties" /&gt;</div><div class="line"></div><div class="line">&lt;context:component-scan base-package="com.xxx.xxx.redis"/&gt;</div><div class="line"></div><div class="line">   &lt;bean name="genericObjectPoolConfig" class="redis.clients.jedis.JedisPoolConfig"&gt;</div><div class="line">         &lt;property name="maxWaitMillis" value="1000" /&gt;</div><div class="line">         &lt;property name="maxTotal" value="1000"/&gt;</div><div class="line">         &lt;property name="minIdle" value="8"/&gt;</div><div class="line">         &lt;property name="maxIdle" value="100"/&gt;</div><div class="line">   &lt;/bean&gt;</div><div class="line"></div><div class="line">   &lt;bean id="jedisCluster" class="com.xxx.xxx.redis.cluster.JedisClusterFactory"&gt;</div><div class="line">      &lt;property name="addressConfig"&gt;</div><div class="line">         &lt;value&gt;classpath:redis/redis-cluster.properties&lt;/value&gt;</div><div class="line">      &lt;/property&gt;</div><div class="line">      &lt;property name="addressKeyPrefix" value="address" /&gt;  </div><div class="line">      &lt;property name="timeout" value="$&#123;TIMEOUT&#125;"/&gt;</div><div class="line">      &lt;property name="maxAttempts" value="$&#123;MAXATTEMPTS&#125;" /&gt;</div><div class="line">      &lt;property name="password" value="$&#123;PASSWORD&#125;"/&gt;</div><div class="line">      &lt;property name="isNeedAuthentication" value="$&#123;IS_NEED_AUTHENTICATION&#125;"/&gt;</div><div class="line">  &lt;property name="soTimeout" value="$&#123;SO_TIMEOUT&#125;"/&gt;</div><div class="line">  &lt;property name="connectionTimeout" value="$&#123;CONNECTION_TIMEOUT&#125;"/&gt;      </div><div class="line">      &lt;property name="genericObjectPoolConfig" ref="genericObjectPoolConfig" /&gt;</div><div class="line">   &lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p><p><strong> JedisClusterFactory </strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xxx.xxx.redis.cluster;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.HashSet;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.HostAndPort;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisCluster;</div><div class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</div><div class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPoolConfig;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisClusterFactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">JedisCluster</span>&gt;, <span class="title">InitializingBean</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Resource addressConfig;</div><div class="line"><span class="keyword">private</span> String addressKeyPrefix ;</div><div class="line"><span class="keyword">private</span> JedisCluster jedisCluster;</div><div class="line"><span class="keyword">private</span> GenericObjectPoolConfig genericObjectPoolConfig;</div><div class="line"><span class="keyword">private</span> String   password;</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isNeedAuthentication;</div><div class="line"><span class="keyword">private</span> Integer  soTimeout;</div><div class="line"><span class="keyword">private</span> Integer  maxAttempts;</div><div class="line"><span class="keyword">private</span> Integer  connectionTimeout;</div><div class="line"><span class="keyword">private</span> Integer  timeout;</div><div class="line"><span class="keyword">private</span> Pattern p = Pattern.compile(<span class="string">"^.+[:]\\d&#123;1,5&#125;\\s*$"</span>);</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> JedisCluster <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">return</span> jedisCluster;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> Class&lt;? extends JedisCluster&gt; getObjectType() &#123;</div><div class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.jedisCluster != <span class="keyword">null</span> ? <span class="keyword">this</span>.jedisCluster.getClass() : JedisCluster.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Set&lt;HostAndPort&gt; <span class="title">parseHostAndPort</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">Properties prop = <span class="keyword">new</span> Properties();</div><div class="line">prop.load(<span class="keyword">this</span>.addressConfig.getInputStream());</div><div class="line">Set&lt;HostAndPort&gt; haps = <span class="keyword">new</span> HashSet&lt;HostAndPort&gt;();</div><div class="line"><span class="keyword">for</span> (Object key : prop.keySet()) &#123;</div><div class="line"><span class="keyword">if</span> (!((String) key).startsWith(addressKeyPrefix)) &#123;</div><div class="line"><span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line">String val = (String) prop.get(key);</div><div class="line"><span class="keyword">boolean</span> isIpPort = p.matcher(val).matches();</div><div class="line"><span class="keyword">if</span> (!isIpPort) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"ip 或 port 不合法"</span>);</div><div class="line">&#125;</div><div class="line">String[] ipAndPort = val.split(<span class="string">":"</span>);</div><div class="line">HostAndPort hap = <span class="keyword">new</span> HostAndPort(ipAndPort[<span class="number">0</span>], Integer.parseInt(ipAndPort[<span class="number">1</span>]));</div><div class="line">haps.add(hap);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> haps;</div><div class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</div><div class="line"><span class="keyword">throw</span> ex;</div><div class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"解析 jedis 配置文件失败"</span>, ex);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">Set&lt;HostAndPort&gt; haps = <span class="keyword">this</span>.parseHostAndPort();</div><div class="line"><span class="keyword">if</span>(isNeedAuthentication)&#123;</div><div class="line">jedisCluster = <span class="keyword">new</span>  JedisCluster(haps, connectionTimeout,  soTimeout,  maxAttempts, password, genericObjectPoolConfig);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">jedisCluster = <span class="keyword">new</span> JedisCluster(haps, timeout, maxAttempts,genericObjectPoolConfig);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddressConfig</span><span class="params">(Resource addressConfig)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.addressConfig = addressConfig;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddressKeyPrefix</span><span class="params">(String addressKeyPrefix)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.addressKeyPrefix = addressKeyPrefix;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGenericObjectPoolConfig</span><span class="params">(GenericObjectPoolConfig genericObjectPoolConfig)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.genericObjectPoolConfig = genericObjectPoolConfig;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.password = password;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsNeedAuthentication</span><span class="params">(<span class="keyword">boolean</span> isNeedAuthentication)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.isNeedAuthentication = isNeedAuthentication;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSoTimeout</span><span class="params">(Integer soTimeout)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.soTimeout = soTimeout;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxAttempts</span><span class="params">(Integer maxAttempts)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.maxAttempts = maxAttempts;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConnectionTimeout</span><span class="params">(Integer connectionTimeout)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.connectionTimeout = connectionTimeout;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTimeout</span><span class="params">(Integer timeout)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.timeout = timeout;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>客户端封装类 RedisCluster</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div><div class="line">755</div><div class="line">756</div><div class="line">757</div><div class="line">758</div><div class="line">759</div><div class="line">760</div><div class="line">761</div><div class="line">762</div><div class="line">763</div><div class="line">764</div><div class="line">765</div><div class="line">766</div><div class="line">767</div><div class="line">768</div><div class="line">769</div><div class="line">770</div><div class="line">771</div><div class="line">772</div><div class="line">773</div><div class="line">774</div><div class="line">775</div><div class="line">776</div><div class="line">777</div><div class="line">778</div><div class="line">779</div><div class="line">780</div><div class="line">781</div><div class="line">782</div><div class="line">783</div><div class="line">784</div><div class="line">785</div><div class="line">786</div><div class="line">787</div><div class="line">788</div><div class="line">789</div><div class="line">790</div><div class="line">791</div><div class="line">792</div><div class="line">793</div><div class="line">794</div><div class="line">795</div><div class="line">796</div><div class="line">797</div><div class="line">798</div><div class="line">799</div><div class="line">800</div><div class="line">801</div><div class="line">802</div><div class="line">803</div><div class="line">804</div><div class="line">805</div><div class="line">806</div><div class="line">807</div><div class="line">808</div><div class="line">809</div><div class="line">810</div><div class="line">811</div><div class="line">812</div><div class="line">813</div><div class="line">814</div><div class="line">815</div><div class="line">816</div><div class="line">817</div><div class="line">818</div><div class="line">819</div><div class="line">820</div><div class="line">821</div><div class="line">822</div><div class="line">823</div><div class="line">824</div><div class="line">825</div><div class="line">826</div><div class="line">827</div><div class="line">828</div><div class="line">829</div><div class="line">830</div><div class="line">831</div><div class="line">832</div><div class="line">833</div><div class="line">834</div><div class="line">835</div><div class="line">836</div><div class="line">837</div><div class="line">838</div><div class="line">839</div><div class="line">840</div><div class="line">841</div><div class="line">842</div><div class="line">843</div><div class="line">844</div><div class="line">845</div><div class="line">846</div><div class="line">847</div><div class="line">848</div><div class="line">849</div><div class="line">850</div><div class="line">851</div><div class="line">852</div><div class="line">853</div><div class="line">854</div><div class="line">855</div><div class="line">856</div><div class="line">857</div><div class="line">858</div><div class="line">859</div><div class="line">860</div><div class="line">861</div><div class="line">862</div><div class="line">863</div><div class="line">864</div><div class="line">865</div><div class="line">866</div><div class="line">867</div><div class="line">868</div><div class="line">869</div><div class="line">870</div><div class="line">871</div><div class="line">872</div><div class="line">873</div><div class="line">874</div><div class="line">875</div><div class="line">876</div><div class="line">877</div><div class="line">878</div><div class="line">879</div><div class="line">880</div><div class="line">881</div><div class="line">882</div><div class="line">883</div><div class="line">884</div><div class="line">885</div><div class="line">886</div><div class="line">887</div><div class="line">888</div><div class="line">889</div><div class="line">890</div><div class="line">891</div><div class="line">892</div><div class="line">893</div><div class="line">894</div><div class="line">895</div><div class="line">896</div><div class="line">897</div><div class="line">898</div><div class="line">899</div><div class="line">900</div><div class="line">901</div><div class="line">902</div><div class="line">903</div><div class="line">904</div><div class="line">905</div><div class="line">906</div><div class="line">907</div><div class="line">908</div><div class="line">909</div><div class="line">910</div><div class="line">911</div><div class="line">912</div><div class="line">913</div><div class="line">914</div><div class="line">915</div><div class="line">916</div><div class="line">917</div><div class="line">918</div><div class="line">919</div><div class="line">920</div><div class="line">921</div><div class="line">922</div><div class="line">923</div><div class="line">924</div><div class="line">925</div><div class="line">926</div><div class="line">927</div><div class="line">928</div><div class="line">929</div><div class="line">930</div><div class="line">931</div><div class="line">932</div><div class="line">933</div><div class="line">934</div><div class="line">935</div><div class="line">936</div><div class="line">937</div><div class="line">938</div><div class="line">939</div><div class="line">940</div><div class="line">941</div><div class="line">942</div><div class="line">943</div><div class="line">944</div><div class="line">945</div><div class="line">946</div><div class="line">947</div><div class="line">948</div><div class="line">949</div><div class="line">950</div><div class="line">951</div><div class="line">952</div><div class="line">953</div><div class="line">954</div><div class="line">955</div><div class="line">956</div><div class="line">957</div><div class="line">958</div><div class="line">959</div><div class="line">960</div><div class="line">961</div><div class="line">962</div><div class="line">963</div><div class="line">964</div><div class="line">965</div><div class="line">966</div><div class="line">967</div><div class="line">968</div><div class="line">969</div><div class="line">970</div><div class="line">971</div><div class="line">972</div><div class="line">973</div><div class="line">974</div><div class="line">975</div><div class="line">976</div><div class="line">977</div><div class="line">978</div><div class="line">979</div><div class="line">980</div><div class="line">981</div><div class="line">982</div><div class="line">983</div><div class="line">984</div><div class="line">985</div><div class="line">986</div><div class="line">987</div><div class="line">988</div><div class="line">989</div><div class="line">990</div><div class="line">991</div><div class="line">992</div><div class="line">993</div><div class="line">994</div><div class="line">995</div><div class="line">996</div><div class="line">997</div><div class="line">998</div><div class="line">999</div><div class="line">1000</div><div class="line">1001</div><div class="line">1002</div><div class="line">1003</div><div class="line">1004</div><div class="line">1005</div><div class="line">1006</div><div class="line">1007</div><div class="line">1008</div><div class="line">1009</div><div class="line">1010</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.xxx.xxx.redis.cluster;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</div><div class="line"><span class="keyword">import</span> redis.clients.util.SafeEncoder;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.JedisCluster;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.SortingParams;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"><span class="keyword">import</span> redis.clients.jedis.BinaryClient.LIST_POSITION;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * REDIS集群模式封装服务</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@Qualifier</span>(<span class="string">"default"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCluster</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> JedisCluster jedisCluster;</div><div class="line"></div><div class="line"><span class="comment">/**操作Key的方法*/</span></div><div class="line"><span class="keyword">public</span> Keys KEYS;</div><div class="line"></div><div class="line"><span class="comment">/** 对存储结构为HashMap类型的操作 */</span></div><div class="line"><span class="keyword">public</span> Hash HASH;</div><div class="line"></div><div class="line"><span class="comment">/** 对存储结构为Set(排序的)类型的操作 */</span></div><div class="line"><span class="keyword">public</span> SortSet SORTSET;</div><div class="line"></div><div class="line"> <span class="comment">/**对存储结构为String类型的操作*/</span></div><div class="line"><span class="keyword">public</span> Strings STRINGS;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对存储结构为Lists类型的操作</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> Lists  LISTS; </div><div class="line"></div><div class="line"><span class="keyword">public</span> Sets   SETS;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="meta">@PostConstruct</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line"> SORTSET = <span class="keyword">new</span> SortSet();</div><div class="line"> HASH = <span class="keyword">new</span> Hash();</div><div class="line"> KEYS = <span class="keyword">new</span> Keys();</div><div class="line"> STRINGS = <span class="keyword">new</span> Strings();</div><div class="line"> LISTS  =  <span class="keyword">new</span> Lists();</div><div class="line"> SETS   =  <span class="keyword">new</span> Sets();</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hash</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 从hash中删除指定的存储</div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> * key</div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> * field 存储的名字</div><div class="line"> * <span class="doctag">@return</span> 状态码，1成功，0失败</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">hdel</span><span class="params">(String key, String field)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> s = jedisCluster.hdel(key, field); </div><div class="line"><span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">hdel</span><span class="params">(String key)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> s = jedisCluster.del(key);</div><div class="line"><span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试hash中指定的存储是否存在</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            key</div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            field 存储的名字</div><div class="line"> * <span class="doctag">@return</span> 1存在，0不存在</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hexists</span><span class="params">(String key, String field)</span> </span>&#123;</div><div class="line"><span class="keyword">boolean</span> s = jedisCluster.hexists(key, field);</div><div class="line"><span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回hash中指定存储位置的值</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            key</div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            field 存储的名字</div><div class="line"> * <span class="doctag">@return</span> 存储对应的值</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hget</span><span class="params">(String key, String field)</span> </span>&#123;</div><div class="line">String s = jedisCluster.hget(key, field);</div><div class="line"><span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 以Map的形式返回hash中的存储和值</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            key</div><div class="line"> * <span class="doctag">@return</span> Map&lt;Strinig,String&gt;</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">hgetall</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">Map&lt;String, String&gt; map = jedisCluster.hgetAll(key);</div><div class="line"><span class="keyword">return</span> map;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 在指定的存储位置加上指定的数字，存储位置的值必须可转为数字类型</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            key</div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            field 存储位置</div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            long value 要增加的值,可以是负数</div><div class="line"> * <span class="doctag">@return</span> 增加指定数字后，存储位置的值</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">hincrby</span><span class="params">(String key, String field, <span class="keyword">long</span> value)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> s = jedisCluster.hincrBy(key, field, value);</div><div class="line"><span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回指定hash中的所有存储名字,类似Map中的keySet方法</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            key</div><div class="line"> * <span class="doctag">@return</span> Set&lt;String&gt; 存储名称的集合</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">hkeys</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">Set&lt;String&gt; set = jedisCluster.hkeys(key);</div><div class="line"><span class="keyword">return</span> set;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取hash中存储的个数，类似Map中size方法</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            key</div><div class="line"> * <span class="doctag">@return</span> long 存储的个数</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">hlen</span><span class="params">(String key)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> len = jedisCluster.hlen(key);</div><div class="line"><span class="keyword">return</span> len;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据多个key，获取对应的value，返回List,如果指定的key不存在,List对应位置为null</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            key</div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            ... fields 存储位置</div><div class="line"> * <span class="doctag">@return</span> List&lt;String&gt;</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">hmget</span><span class="params">(String key, String... fields)</span> </span>&#123;</div><div class="line">List&lt;String&gt; list = jedisCluster.hmget(key, fields);</div><div class="line"><span class="keyword">return</span> list;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加对应关系，如果对应关系已存在，则覆盖</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> Strin</div><div class="line"> *            key</div><div class="line"> * <span class="doctag">@param</span> Map</div><div class="line"> *            &lt;String,String&gt; 对应关系</div><div class="line"> * <span class="doctag">@return</span> 状态，成功返回OK</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hmset</span><span class="params">(String key, Map&lt;String, String&gt; map)</span> </span>&#123;</div><div class="line">String s = jedisCluster.hmset(key, map);</div><div class="line"><span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加一个对应关系</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            key</div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            field</div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            value</div><div class="line"> * <span class="doctag">@return</span> 状态码 1成功，0失败，field已存在将更新，也返回0</div><div class="line"> * **/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">hset</span><span class="params">(String key, String field, String value)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> s = jedisCluster.hset(key, field, value);</div><div class="line"><span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加对应关系，只有在field不存在时才执行</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            key</div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            field</div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> *            value</div><div class="line"> * <span class="doctag">@return</span> 状态码 1成功，0失败field已存</div><div class="line"> * **/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">hsetnx</span><span class="params">(String key, String field, String value)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> s = jedisCluster.hsetnx(key, field, value);</div><div class="line"><span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取hash中value的集合</div><div class="line"> * </div><div class="line"> * <span class="doctag">@param</span> String</div><div class="line"> * key</div><div class="line"> * <span class="doctag">@return</span> List&lt;String&gt;</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">hvals</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">List&lt;String&gt; list = jedisCluster.hvals(key);</div><div class="line"><span class="keyword">return</span> list;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortSet</span></span>&#123;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 向集合中增加一条记录,如果这个值已存在，这个值对应的权重将被置为新的权重</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> double score 权重</div><div class="line">  * <span class="doctag">@param</span> String member 要加入的值，</div><div class="line">  * <span class="doctag">@return</span> 状态码 1成功，0已存在member的值</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">zadd</span><span class="params">(String key,<span class="keyword">double</span> score,String member)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> s =jedisCluster.zadd(key, score, member);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取集合中元素的数量</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@return</span> 如果返回0则集合不存在</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">zcard</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> len= jedisCluster.zcard(key);</div><div class="line"> <span class="keyword">return</span> len;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取指定权重区间内集合的数量</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> double min 最小排序位置</div><div class="line">  * <span class="doctag">@param</span> double max 最大排序位置</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">zcount</span><span class="params">(String key,<span class="keyword">double</span> min,<span class="keyword">double</span> max)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> len= jedisCluster.zcount(key, min, max);</div><div class="line"> <span class="keyword">return</span> len;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获得set的长度</div><div class="line">  * <span class="doctag">@param</span> key</div><div class="line">  * <span class="doctag">@return</span></div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">zlength</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line"> Set&lt;String&gt; set = zrange(key,<span class="number">0L</span>,-<span class="number">1L</span>);</div><div class="line"> len = set.size();</div><div class="line"> <span class="keyword">return</span> len;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 权重增加给定值，如果给定的member已存在</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> double score 要增的权重</div><div class="line">  * <span class="doctag">@param</span> String member 要插入的值</div><div class="line">  * <span class="doctag">@return</span> 增后的权重</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">zincrby</span><span class="params">(String key,<span class="keyword">double</span> score,String member)</span></span>&#123;</div><div class="line"> <span class="keyword">double</span> s =jedisCluster.zincrby(key, score, member);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 返回指定位置的集合元素,0为第一个元素，-1为最后一个元素</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> int start 开始位置(包含)</div><div class="line">  * <span class="doctag">@param</span> int end结束位置(包含)</div><div class="line">  * <span class="doctag">@return</span> Set&lt;String&gt;</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">zrange</span><span class="params">(String key,<span class="keyword">long</span> start,<span class="keyword">long</span> end)</span></span>&#123;</div><div class="line"> Set&lt;String&gt; set= jedisCluster.zrange(key, start, end);</div><div class="line"> <span class="keyword">return</span> set;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 返回指定权重区间的元素集合</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> double min 上限权重</div><div class="line">  * <span class="doctag">@param</span> double max 下限权重</div><div class="line">  * <span class="doctag">@return</span> Set&lt;String&gt;</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">zrangeByScore</span><span class="params">(String key,<span class="keyword">double</span> min,<span class="keyword">double</span> max)</span></span>&#123;</div><div class="line"> Set&lt;String&gt; set= jedisCluster.zrangeByScore(key, min, max);</div><div class="line"> <span class="keyword">return</span> set;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取指定值在集合中的位置，集合排序从低到高</div><div class="line">  * <span class="doctag">@see</span> zrevrank</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> String member</div><div class="line">  * <span class="doctag">@return</span> long 位置</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">zrank</span><span class="params">(String key,String member)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> index= jedisCluster.zrank(key,member);</div><div class="line"> <span class="keyword">return</span> index;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取指定值在集合中的位置，集合排序从低到高</div><div class="line">  * <span class="doctag">@see</span> zrank</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> String member</div><div class="line">  * <span class="doctag">@return</span> long 位置</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">zrevrank</span><span class="params">(String key,String member)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> index= jedisCluster.zrevrank(key, member);</div><div class="line"> <span class="keyword">return</span> index;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 从集合中删除成员</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> String member</div><div class="line">  * <span class="doctag">@return</span> 返回1成功</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">zrem</span><span class="params">(String key,String member)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> s =jedisCluster.zrem(key, member);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 删除</div><div class="line">  * <span class="doctag">@param</span> key</div><div class="line">  * <span class="doctag">@return</span></div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">zrem</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> s =jedisCluster.del(key);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 删除给定位置区间的元素</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> int start 开始区间，从0开始(包含)</div><div class="line">  * <span class="doctag">@param</span> int end 结束区间,-1为最后一个元素(包含)</div><div class="line">  * <span class="doctag">@return</span> 删除的数量</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">zremrangeByRank</span><span class="params">(String key,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> s =jedisCluster.zremrangeByRank(key, start, end);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 删除给定权重区间的元素</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> double min 下限权重(包含)</div><div class="line">  * <span class="doctag">@param</span> double max 上限权重(包含)</div><div class="line">  * <span class="doctag">@return</span> 删除的数量</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">zremrangeByScore</span><span class="params">(String key,<span class="keyword">double</span> min,<span class="keyword">double</span> max)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> s =jedisCluster.zremrangeByScore(key, min, max);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取给定区间的元素，原始按照权重由高到低排序</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> int start</div><div class="line">  * <span class="doctag">@param</span> int end</div><div class="line">  * <span class="doctag">@return</span> Set&lt;String&gt;</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">zrevrange</span><span class="params">(String key,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</div><div class="line"> Set&lt;String&gt; set= jedisCluster.zrevrange(key,start,end);</div><div class="line"> <span class="keyword">return</span> set;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取给定值在集合中的权重</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> memeber</div><div class="line">  * <span class="doctag">@return</span> double 权重</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">zscore</span><span class="params">(String key,String memebr)</span></span>&#123;</div><div class="line"> Double score= jedisCluster.zscore(key,memebr);</div><div class="line"> <span class="keyword">if</span>(score!=<span class="keyword">null</span>) <span class="keyword">return</span> score;</div><div class="line"> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Keys</span></span>&#123;</div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 更改key,仅当新key不存在时才执行</div><div class="line">  * <span class="doctag">@param</span> String oldkey</div><div class="line">  * <span class="doctag">@param</span> String newkey</div><div class="line">  * <span class="doctag">@return</span> 状态码</div><div class="line">  * */</div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">flushAll</span><span class="params">()</span></span>&#123;</div><div class="line"> String stata=jedisCluster.flushAll();</div><div class="line"> <span class="keyword">return</span> stata;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 设置key的过期时间，以秒为单位</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> 时间,已秒为单位</div><div class="line">  * <span class="doctag">@return</span> 影响的记录数</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">expired</span><span class="params">(String key,<span class="keyword">int</span> seconds)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> count =jedisCluster.expire(key, seconds);</div><div class="line"> <span class="keyword">return</span> count;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 设置key的过期时间,它是距历元（即格林威治标准时间 1970 年 1 月 1 日的 00:00:00，格里高利历）的偏移量。</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> 时间,已秒为单位</div><div class="line">  * <span class="doctag">@return</span> 影响的记录数</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">expireAt</span><span class="params">(String key,<span class="keyword">long</span> timestamp)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> count =jedisCluster.expireAt(key, timestamp);</div><div class="line"> <span class="keyword">return</span> count;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 查询key的过期时间</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@return</span> 以秒为单位的时间表示</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">ttl</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> len=jedisCluster.ttl(key);</div><div class="line"> <span class="keyword">return</span> len;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 取消对key过期时间的设置</div><div class="line">  *<span class="doctag">@param</span> key</div><div class="line">  *<span class="doctag">@return</span> 影响的记录数</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">persist</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> count =jedisCluster.persist(key);</div><div class="line"> <span class="keyword">return</span> count;</div><div class="line"> &#125;</div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 删除keys对应的记录,可以是多个key</div><div class="line">  * <span class="doctag">@param</span> String... keys</div><div class="line">  * <span class="doctag">@return</span> 删除的记录数</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">del</span><span class="params">(String... keys)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span>  delCount=<span class="number">0</span>;</div><div class="line"> <span class="keyword">for</span>(String key:keys)&#123;</div><div class="line"> delCount += jedisCluster.del(key);</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">return</span> delCount;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 判断key是否存在</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@return</span> boolean</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> <span class="keyword">boolean</span> isExist=jedisCluster.exists(key);</div><div class="line"> <span class="keyword">return</span> isExist;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 对List,Set,SortSet进行排序,如果集合数据较大应避免使用这个方法</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@return</span> List&lt;String&gt; 集合的全部记录</div><div class="line">  * **/</div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">sort</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> List&lt;String&gt; list=jedisCluster.sort(key);</div><div class="line"> <span class="keyword">return</span> list;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 对List,Set,SortSet进行排序或limit</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> SortingParams parame 定义排序类型或limit的起止位置.</div><div class="line">  * <span class="doctag">@return</span> List&lt;String&gt; 全部或部分记录</div><div class="line">  * **/</div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">sort</span><span class="params">(String key,SortingParams parame)</span></span>&#123;</div><div class="line"> List&lt;String&gt; list=jedisCluster.sort(key, parame);</div><div class="line"> <span class="keyword">return</span> list;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 返回指定key存储的类型</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@return</span> String  string|list|set|zset|hash</div><div class="line">  * **/</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">type</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> String type=jedisCluster.type(key);</div><div class="line"> <span class="keyword">return</span> type;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Strings</span></span>&#123;</div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 根据key获取记录</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@return</span> 值</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> String value= jedisCluster.get(key);</div><div class="line"> <span class="keyword">return</span> value;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 添加有过期时间的记录</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> int seconds  过期时间，以秒为单位</div><div class="line">  * <span class="doctag">@param</span> String value</div><div class="line">  * <span class="doctag">@return</span> String 操作状态</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">setEx</span><span class="params">(String key,<span class="keyword">int</span> seconds,String value)</span></span>&#123;</div><div class="line"> String str =jedisCluster.setex(key, seconds, value);</div><div class="line"> <span class="keyword">return</span> str;</div><div class="line"> &#125; </div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 添加一条记录，仅当给定的key不存在时才插入</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> String value</div><div class="line">  * <span class="doctag">@return</span> long 状态码，1插入成功且key不存在，0未插入，key存在</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setnx</span><span class="params">(String key,String value)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> str =jedisCluster.setnx(key, value);</div><div class="line"> <span class="keyword">return</span> str;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 添加记录,如果记录已存在将覆盖原有的value</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> String value</div><div class="line">  * <span class="doctag">@return</span> 状态码</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">set</span><span class="params">(String key,String value)</span></span>&#123;</div><div class="line"> <span class="keyword">return</span> jedisCluster.set(key, value);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 从指定位置开始插入数据，插入的数据会覆盖指定位置以后的数据&lt;br/&gt;</div><div class="line">  * 例:String str1="123456789";&lt;br/&gt;</div><div class="line">  * 对str1操作后setRange(key,4,0000)，str1="123400009";</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> long offset</div><div class="line">  * <span class="doctag">@param</span> String value</div><div class="line">  * <span class="doctag">@return</span> long value的长度</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRange</span><span class="params">(String key,<span class="keyword">long</span> offset,String value)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> len =jedisCluster.setrange(key, offset, value);</div><div class="line"> <span class="keyword">return</span> len;</div><div class="line"> &#125;</div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 在指定的key中追加value</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> String value</div><div class="line">  * <span class="doctag">@return</span> long 追加后value的长度</div><div class="line">  * **/</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">append</span><span class="params">(String key,String value)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> len =jedisCluster.append(key, value);</div><div class="line"> <span class="keyword">return</span> len;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 将key对应的value减去指定的值，只有value可以转为数字时该方法才可用</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> long number 要减去的值</div><div class="line">  * <span class="doctag">@return</span> long 减指定值后的值</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decrBy</span><span class="params">(String key,<span class="keyword">long</span> number)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> len =jedisCluster.decrBy(key,number);</div><div class="line"> <span class="keyword">return</span> len;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * &lt;b&gt;可以作为获取唯一id的方法&lt;/b&gt;&lt;br/&gt;</div><div class="line">  * 将key对应的value加上指定的值，只有value可以转为数字时该方法才可用</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> long number 要减去的值</div><div class="line">  * <span class="doctag">@return</span> long 相加后的值</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incrBy</span><span class="params">(String key,<span class="keyword">long</span> number)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> len =jedisCluster.incrBy(key,number);</div><div class="line"> <span class="keyword">return</span> len;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 对指定key对应的value进行截取</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> long startOffset 开始位置(包含)</div><div class="line">  * <span class="doctag">@param</span> long endOffset 结束位置(包含)</div><div class="line">  * <span class="doctag">@return</span> String 截取的值</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getrange</span><span class="params">(String key,<span class="keyword">long</span> startOffset,<span class="keyword">long</span> endOffset)</span></span>&#123;</div><div class="line"> String value= jedisCluster.getrange(key, startOffset, endOffset);</div><div class="line"> <span class="keyword">return</span> value;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取并设置指定key对应的value&lt;br/&gt;</div><div class="line">  * 如果key存在返回之前的value,否则返回null</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> String value</div><div class="line">  * <span class="doctag">@return</span> String 原始value或null</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">getSet</span><span class="params">(String key,String value)</span></span>&#123;</div><div class="line"> String str =jedisCluster.getSet(key, value);</div><div class="line"> <span class="keyword">return</span> str;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取key对应的值的长度</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@return</span> value值得长度</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">strlen</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> len =jedisCluster.strlen(key);</div><div class="line"> <span class="keyword">return</span> len;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lists</span></span>&#123;</div><div class="line"> <span class="comment">/**</span></div><div class="line">  * List长度</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@return</span> 长度</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">llen</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> <span class="keyword">return</span> llen(SafeEncoder.encode(key));</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * List长度</div><div class="line">  * <span class="doctag">@param</span> byte[] key</div><div class="line">  * <span class="doctag">@return</span> 长度</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">llen</span><span class="params">(<span class="keyword">byte</span>[] key)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> count= jedisCluster.llen(key);</div><div class="line"> <span class="keyword">return</span> count;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 覆盖操作,将覆盖List中指定位置的值</div><div class="line">  * <span class="doctag">@param</span> byte[] key</div><div class="line">  * <span class="doctag">@param</span> int index 位置</div><div class="line">  * <span class="doctag">@param</span> byte[] value 值</div><div class="line">  * <span class="doctag">@return</span> 状态码</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">lset</span><span class="params">(<span class="keyword">byte</span>[] key,<span class="keyword">int</span> index,<span class="keyword">byte</span>[] value)</span></span>&#123;</div><div class="line"> String status=jedisCluster.lset(key, index, value);</div><div class="line"> <span class="keyword">return</span> status;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 覆盖操作,将覆盖List中指定位置的值</div><div class="line">  * <span class="doctag">@param</span> key</div><div class="line">  * <span class="doctag">@param</span> int index 位置</div><div class="line">  * <span class="doctag">@param</span> String value 值</div><div class="line">  * <span class="doctag">@return</span> 状态码</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">lset</span><span class="params">(String key,<span class="keyword">int</span> index,String value)</span></span>&#123;</div><div class="line"> <span class="keyword">return</span> lset(SafeEncoder.encode(key),index,SafeEncoder.encode(value));</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 在value的相对位置插入记录</div><div class="line">  * <span class="doctag">@param</span> key</div><div class="line">  * <span class="doctag">@param</span> LIST_POSITION  前面插入或后面插入</div><div class="line">  * <span class="doctag">@param</span> String pivot 相对位置的内容</div><div class="line">  * <span class="doctag">@param</span> String value 插入的内容</div><div class="line">  * <span class="doctag">@return</span> 记录总数</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">linsert</span><span class="params">(String key,LIST_POSITION where,String pivot,String value)</span></span>&#123;</div><div class="line"> <span class="keyword">return</span> linsert(SafeEncoder.encode(key),where,SafeEncoder.encode(pivot),SafeEncoder.encode(value));</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 在指定位置插入记录</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> LIST_POSITION  前面插入或后面插入</div><div class="line">  * <span class="doctag">@param</span> byte[] pivot 相对位置的内容</div><div class="line">  * <span class="doctag">@param</span> byte[] value 插入的内容</div><div class="line">  * <span class="doctag">@return</span> 记录总数</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">linsert</span><span class="params">(<span class="keyword">byte</span>[] key,LIST_POSITION where,<span class="keyword">byte</span>[] pivot,<span class="keyword">byte</span>[] value)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> count=jedisCluster.linsert(key, where, pivot, value);</div><div class="line"> <span class="keyword">return</span> count;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取List中指定位置的值</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> int index 位置</div><div class="line">  * <span class="doctag">@return</span> 值</div><div class="line">  * **/</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">lindex</span><span class="params">(String key,<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line"> <span class="keyword">return</span> SafeEncoder.encode(lindex(SafeEncoder.encode(key),index));</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取List中指定位置的值</div><div class="line">  * <span class="doctag">@param</span> byte[] key</div><div class="line">  * <span class="doctag">@param</span> int index 位置</div><div class="line">  * <span class="doctag">@return</span> 值</div><div class="line">  * **/</div><div class="line"> <span class="keyword">public</span> <span class="keyword">byte</span>[] lindex(<span class="keyword">byte</span>[] key,<span class="keyword">int</span> index)&#123;</div><div class="line"> <span class="keyword">byte</span>[] value=jedisCluster.lindex(key, index);</div><div class="line"> <span class="keyword">return</span> value;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 将List中的第一条记录移出List</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@return</span> 移出的记录</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">lpop</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> <span class="keyword">return</span> SafeEncoder.encode(lpop(SafeEncoder.encode(key)));</div><div class="line"> &#125;</div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 将List中的第一条记录移出List</div><div class="line">  * <span class="doctag">@param</span> byte[] key</div><div class="line">  * <span class="doctag">@return</span> 移出的记录</div><div class="line">  * */</div><div class="line"> <span class="keyword">public</span> <span class="keyword">byte</span>[] lpop(<span class="keyword">byte</span>[] key)&#123;</div><div class="line"> <span class="keyword">byte</span>[] value=jedisCluster.lpop(key);</div><div class="line"> <span class="keyword">return</span> value;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 将List中最后第一条记录移出List</div><div class="line">  * <span class="doctag">@param</span> byte[] key</div><div class="line">  * <span class="doctag">@return</span> 移出的记录</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">rpop</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> String value=jedisCluster.rpop(key);</div><div class="line"> <span class="keyword">return</span> value;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 向List尾部追加记录</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> String value</div><div class="line">  * <span class="doctag">@return</span> 记录总数</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lpush</span><span class="params">(String key,String value)</span></span>&#123;</div><div class="line"> <span class="keyword">return</span> lpush(SafeEncoder.encode(key),SafeEncoder.encode(value));</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 向List头部追加记录</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> String value</div><div class="line">  * <span class="doctag">@return</span> 记录总数</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">rpush</span><span class="params">(String key,String value)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> count=jedisCluster.rpush(key, value);</div><div class="line"> <span class="keyword">return</span> count;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 向List中追加记录</div><div class="line">  * <span class="doctag">@param</span> byte[] key</div><div class="line">  * <span class="doctag">@param</span> byte[] value</div><div class="line">  * <span class="doctag">@return</span> 记录总数</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lpush</span><span class="params">(<span class="keyword">byte</span>[] key,<span class="keyword">byte</span>[] value)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> count=jedisCluster.lpush(key, value);</div><div class="line"> <span class="keyword">return</span> count;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取指定范围的记录，可以做为分页使用</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> long start</div><div class="line">  * <span class="doctag">@param</span> long end</div><div class="line">  * <span class="doctag">@return</span> List</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">lrange</span><span class="params">(String key,<span class="keyword">long</span> start,<span class="keyword">long</span> end)</span></span>&#123;</div><div class="line"> List&lt;String&gt; list=jedisCluster.lrange(key, start,end);</div><div class="line"> <span class="keyword">return</span> list;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取指定范围的记录，可以做为分页使用</div><div class="line">  * <span class="doctag">@param</span> byte[] key</div><div class="line">  * <span class="doctag">@param</span> int start</div><div class="line">  * <span class="doctag">@param</span> int end 如果为负数，则尾部开始计算</div><div class="line">  * <span class="doctag">@return</span> List</div><div class="line">  * */</div><div class="line"> <span class="keyword">public</span> List&lt;<span class="keyword">byte</span>[]&gt; lrange(<span class="keyword">byte</span>[] key,<span class="keyword">int</span> start,<span class="keyword">int</span> end)&#123;</div><div class="line"> List&lt;<span class="keyword">byte</span>[]&gt; list=jedisCluster.lrange(key, start,end);</div><div class="line"> <span class="keyword">return</span> list;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 删除List中c条记录，被删除的记录值为value</div><div class="line">  * <span class="doctag">@param</span> byte[] key</div><div class="line">  * <span class="doctag">@param</span> int c 要删除的数量，如果为负数则从List的尾部检查并删除符合的记录</div><div class="line">  * <span class="doctag">@param</span> byte[] value 要匹配的值</div><div class="line">  * <span class="doctag">@return</span> 删除后的List中的记录数</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lrem</span><span class="params">(<span class="keyword">byte</span>[] key,<span class="keyword">int</span> c,<span class="keyword">byte</span>[] value)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> count=jedisCluster.lrem(key, c,value);</div><div class="line"> <span class="keyword">return</span> count;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 删除List中c条记录，被删除的记录值为value</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> int c 要删除的数量，如果为负数则从List的尾部检查并删除符合的记录</div><div class="line">  * <span class="doctag">@param</span> String value 要匹配的值</div><div class="line">  * <span class="doctag">@return</span> 删除后的List中的记录数</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lrem</span><span class="params">(String key,<span class="keyword">int</span> c,String value)</span></span>&#123;</div><div class="line"> <span class="keyword">return</span> lrem(SafeEncoder.encode(key),c,SafeEncoder.encode(value));</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 算是删除吧，只保留start与end之间的记录</div><div class="line">  * <span class="doctag">@param</span> byte[] key</div><div class="line">  * <span class="doctag">@param</span> int start 记录的开始位置(0表示第一条记录)</div><div class="line">  * <span class="doctag">@param</span> int end 记录的结束位置（如果为-1则表示最后一个，-2，-3以此类推）</div><div class="line">  * <span class="doctag">@return</span> 执行状态码</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">ltrim</span><span class="params">(<span class="keyword">byte</span>[] key,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</div><div class="line"> String str=jedisCluster.ltrim(key, start, end);</div><div class="line"> <span class="keyword">return</span> str;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 算是删除吧，只保留start与end之间的记录</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> int start 记录的开始位置(0表示第一条记录)</div><div class="line">  * <span class="doctag">@param</span> int end 记录的结束位置（如果为-1则表示最后一个，-2，-3以此类推）</div><div class="line">  * <span class="doctag">@return</span> 执行状态码</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">ltrim</span><span class="params">(String key,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</div><div class="line"> <span class="keyword">return</span> ltrim(SafeEncoder.encode(key),start,end);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sets</span></span>&#123;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 向Set添加一条记录，如果member已存在返回0,否则返回1</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> String member</div><div class="line">  * <span class="doctag">@return</span> 操作码,0或1</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sadd</span><span class="params">(String key,String member)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> s =jedisCluster.sadd(key, member);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 获取给定key中元素个数</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@return</span> 元素个数</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">scard</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> len=jedisCluster.scard(key);</div><div class="line"> <span class="keyword">return</span> len;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 返回从第一组和所有的给定集合之间的差异的成员</div><div class="line">  * <span class="doctag">@param</span> String... keys</div><div class="line">  * <span class="doctag">@return</span> 差异的成员集合</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sdiff</span><span class="params">(String...keys)</span></span>&#123;</div><div class="line"> Set&lt;String&gt; set =jedisCluster.sdiff(keys);</div><div class="line"> <span class="keyword">return</span> set;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 这个命令等于sdiff,但返回的不是结果集,而是将结果集存储在新的集合中，如果目标已存在，则覆盖。</div><div class="line">  * <span class="doctag">@param</span> String newkey 新结果集的key</div><div class="line">  * <span class="doctag">@param</span> String... keys 比较的集合</div><div class="line">  * <span class="doctag">@return</span> 新集合中的记录数</div><div class="line">  * **/</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sdiffstore</span><span class="params">(String newkey,String...keys)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> s =jedisCluster.sdiffstore(newkey, keys);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 返回给定集合交集的成员,如果其中一个集合为不存在或为空，则返回空Set</div><div class="line">  * <span class="doctag">@param</span> String... keys</div><div class="line">  * <span class="doctag">@return</span> 交集成员的集合</div><div class="line">  * **/</div><div class="line"> <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sinter</span><span class="params">(String...keys)</span></span>&#123;</div><div class="line"> Set&lt;String&gt; set =jedisCluster.sinter(keys);</div><div class="line"> <span class="keyword">return</span> set;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 这个命令等于sinter,但返回的不是结果集,而是将结果集存储在新的集合中，如果目标已存在，则覆盖。</div><div class="line">  * <span class="doctag">@param</span> String newkey 新结果集的key</div><div class="line">  * <span class="doctag">@param</span> String... keys 比较的集合</div><div class="line">  * <span class="doctag">@return</span> 新集合中的记录数</div><div class="line">  * **/</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sinterstore</span><span class="params">(String newkey,String...keys)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> s =jedisCluster.sinterstore(newkey, keys);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 确定一个给定的值是否存在</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> String member 要判断的值</div><div class="line">  * <span class="doctag">@return</span> 存在返回1，不存在返回0</div><div class="line">  * **/</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sismember</span><span class="params">(String key,String member)</span></span>&#123;</div><div class="line"> <span class="keyword">boolean</span> s= jedisCluster.sismember(key, member);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 返回集合中的所有成员</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@return</span> 成员集合</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">smembers</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> Set&lt;String&gt; set= jedisCluster.smembers(key);</div><div class="line"> <span class="keyword">return</span> set;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 将成员从源集合移出放入目标集合</div><div class="line">  * &lt;br/&gt;如果源集合不存在或不包哈指定成员，不进行任何操作，返回0&lt;br/&gt;</div><div class="line">  * 否则该成员从源集合上删除，并添加到目标集合，如果目标集合中成员已存在，则只在源集合进行删除</div><div class="line">  * <span class="doctag">@param</span> String srckey 源集合</div><div class="line">  * <span class="doctag">@param</span> String dstkey 目标集合</div><div class="line">  * <span class="doctag">@param</span> String member 源集合中的成员</div><div class="line">  * <span class="doctag">@return</span> 状态码，1成功，0失败</div><div class="line">  * */ </div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">smove</span><span class="params">(String srckey,String dstkey,String member)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> s =jedisCluster.smove(srckey, dstkey, member);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 从集合中删除成员</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@return</span> 被删除的成员</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">spop</span><span class="params">(String key)</span></span>&#123;</div><div class="line"> String s =jedisCluster.spop(key);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 从集合中删除指定成员</div><div class="line">  * <span class="doctag">@param</span> String key</div><div class="line">  * <span class="doctag">@param</span> String member 要删除的成员</div><div class="line">  * <span class="doctag">@return</span> 状态码，成功返回1，成员不存在返回0</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">srem</span><span class="params">(String key,String member)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> s =jedisCluster.srem(key,member);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 合并多个集合并返回合并后的结果，合并后的结果集合并不保存&lt;br/&gt;</div><div class="line">  * <span class="doctag">@param</span> String... keys</div><div class="line">  * <span class="doctag">@return</span> 合并后的结果集合</div><div class="line">  * <span class="doctag">@see</span> sunionstore</div><div class="line">  * */</div><div class="line"> <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">sunion</span><span class="params">(String...keys)</span></span>&#123;</div><div class="line"> Set&lt;String&gt; set =jedisCluster.sunion(keys);</div><div class="line"> <span class="keyword">return</span> set;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 合并多个集合并将合并后的结果集保存在指定的新集合中，如果新集合已经存在则覆盖</div><div class="line">  * <span class="doctag">@param</span> String newkey 新集合的key</div><div class="line">  * <span class="doctag">@param</span> String... keys 要合并的集合</div><div class="line">  * **/</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sunionstore</span><span class="params">(String newkey,String...keys)</span></span>&#123;</div><div class="line"> <span class="keyword">long</span> s =jedisCluster.sunionstore(newkey, keys);</div><div class="line"> <span class="keyword">return</span> s;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>封装的 redis 客户端很容易操作，只要知道 redis 操作命令和容易使用。</p><p>同步 redis 数据我使用的是 spring 集成的定时任务，配置如下</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 线程执行器配置，用于任务注册 --&gt;</div><div class="line">   &lt;bean id="executor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"&gt;</div><div class="line">        &lt;!-- 核心线程数 --&gt;</div><div class="line">        &lt;property name="corePoolSize" value="50" /&gt;</div><div class="line">        &lt;!-- 最大线程数 --&gt;</div><div class="line">        &lt;property name="maxPoolSize" value="100" /&gt;</div><div class="line">        &lt;!-- 队列最大长度 &gt;=mainExecutor.maxSize --&gt;</div><div class="line">        &lt;property name="queueCapacity" value="500" /&gt;</div><div class="line">        &lt;!-- 线程池维护线程所允许的空闲时间 --&gt;</div><div class="line">        &lt;!-- &lt;property name="keepAliveSeconds" value="300" /&gt; --&gt;</div><div class="line">        &lt;!-- 线程池对拒绝任务(无线程可用)的处理策略 ThreadPoolExecutor.CallerRunsPolicy策略 ,调用者的线程会执行该任务,如果执行器已关闭,则丢弃.  --&gt;</div><div class="line">        &lt;property name="rejectedExecutionHandler"&gt;</div><div class="line">            &lt;bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" /&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div></pre></td></tr></table></figure><h4 id="业务处理"><a href="#业务处理" class="headerlink" title="业务处理"></a>业务处理</h4><p>根据需求描述，最好的方式是把每个用户对应的歌曲信息以用户手机号作为key，将整理成最终要响应的歌曲信息为值存入 redis，这样客户端调用时直接取出数据响应接口。我开始就是这样干的。很快接口开发出来了，但是很快我就又开始重做了。因为我开始只拿到很少用户数据。每个用户对应的歌曲信息也只有几十条。但是后来数据分析一下提取了一份全量数据，用户量是500多万。而且我们关联处理出来后，每个用户偏好的歌曲是几百首。nnd，算了下，每个用户的数据大概有 200kb 如果早这样的逻辑存储 md 得要至少 100G 内存，这下要命了。redis原来分配的是10g操作内存，同步数据的时候一会儿就满了。怎么办？冷静下来想想，用户数虽然多，但是有很多用户偏好的歌曲是相同的，而且歌曲根本不会有那么多，也就几十万的样子。灵感来了，现在需要将歌曲信息分离出来单独存储形成一个公共数据。并且我将歌曲信息使用 hash 结构存储。这样更节省空间。</p><p><strong>存储歌曲信息操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * FunName: addSongInfoToHash</div><div class="line"> * <span class="doctag">@param</span> songInfoNamespace </div><div class="line"> * <span class="doctag">@Function</span>: 添加歌曲信息到 hash</div><div class="line"> * <span class="doctag">@param</span> recommend 推荐歌曲信息</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addSongInfoToHash</span><span class="params">(String songInfoNamespace, Recommend recommend)</span> </span>&#123;</div><div class="line"><span class="keyword">boolean</span> exists = redisCluster.KEYS.exists(songInfoNamespace);</div><div class="line"><span class="keyword">if</span> (!exists) &#123;</div><div class="line">ConcurrentMap&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;String, String&gt;();</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(recommend.getSongId())) &#123;</div><div class="line">map.put(<span class="string">"songId"</span>, recommend.getSongId());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(recommend.getSongName())) &#123;</div><div class="line">map.put(<span class="string">"songName"</span>, recommend.getSongName());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(recommend.getSingerName())) &#123;</div><div class="line">map.put(<span class="string">"singerName"</span>, recommend.getSingerName());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(recommend.getSingerPic())) &#123;</div><div class="line">map.put(<span class="string">"singerPic"</span>, recommend.getSingerPic());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(recommend.getCopyrightId())) &#123;</div><div class="line">map.put(<span class="string">"copyrightId"</span>, recommend.getCopyrightId());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(recommend.getMp3Audition())) &#123;</div><div class="line">map.put(<span class="string">"mp3Audition"</span>, recommend.getMp3Audition());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(recommend.getHdAudition())) &#123;</div><div class="line">map.put(<span class="string">"hdAudition"</span>, recommend.getHdAudition());</div><div class="line">&#125;</div><div class="line">redisCluster.HASH.hmset(songInfoNamespace, map);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>这下解决了歌曲信息的存储问题，随之是下一个问题，前面说到过，不同类型要按不同比例取并且要按照歌曲热度排名。例如，要为用户展示50首歌曲，要求取歌手类下面的歌曲 50% 也就是 歌手类下面排名靠前的 25首，然后标签下取 30% 也就是 前 15首，其它 20% 也就是 10首。这样的话，我们就不能在同步数据的时候直接将用户号码关联歌曲id，这样的话可以对歌曲排名但是区分不了比例。因为所有的歌曲都混在一起了就不知道歌曲是对应在哪个类型下的了。这样就需要我们在中间存一个转换对应关系，这就是用户偏好的类型信息了。我们将每个用户号码先喜好的歌曲分类存储上。</p></blockquote><p><strong>同步用户偏好的分类信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * <span class="doctag">@ClassName</span>:CachePreferenceRunnable</div><div class="line"> * Function: 同步用户偏好信息定时任务</div><div class="line"> * <span class="doctag">@version</span></div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017年6月2日 下午5:05:56</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CachePreferenceRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Preference pre;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CachePreferenceRunnable</span><span class="params">(Preference pre)</span> </span>&#123;</div><div class="line"><span class="keyword">this</span>.pre = pre;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">ConcurrentMap&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;String, String&gt;();</div><div class="line">String mobile = pre.getMobile();</div><div class="line">String mobileMatchPreferNamespace = RecommendHelper.createMobileMatchPreferNamespace(mobile);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(pre.getSingerName1())) &#123;</div><div class="line">map.put(<span class="string">"singerName1"</span>, pre.getSingerName1());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(pre.getSingerName2())) &#123;</div><div class="line">map.put(<span class="string">"singerName2"</span>, pre.getSingerName2());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(pre.getSingerName3())) &#123;</div><div class="line">map.put(<span class="string">"singerName3"</span>, pre.getSingerName3());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(pre.getSingerName4())) &#123;</div><div class="line">map.put(<span class="string">"singerName4"</span>, pre.getSingerName4());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(pre.getSingerName5())) &#123;</div><div class="line">map.put(<span class="string">"singerName5"</span>, pre.getSingerName5());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(pre.getStyle())) &#123;</div><div class="line">map.put(<span class="string">"style"</span>, pre.getStyle());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(pre.getEmotion())) &#123;</div><div class="line">map.put(<span class="string">"emotion"</span>, pre.getEmotion());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (ValidateParameterUtil.isNotEmpty(pre.getScene())) &#123;</div><div class="line">map.put(<span class="string">"scene"</span>, pre.getScene());</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (!map.isEmpty()) &#123;</div><div class="line">redisCluster.HASH.hmset(mobileMatchPreferNamespace, map);</div><div class="line">logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt; 添加号码："</span> + mobile + <span class="string">" 偏好信息完成。操作 set的key："</span> + mobileMatchPreferNamespace + <span class="string">" 包含的成员信息："</span> + redisCluster.HASH.hgetall(mobileMatchPreferNamespace));</div><div class="line">manageAllMobileKeyToSet(mobileMatchPreferNamespace);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>然后将每种歌曲分类下的歌曲 id 按照歌曲排名用有序集合（sorted set）的数据结构存储。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * FunName: addPreferMatchSongToZSet</div><div class="line"> * <span class="doctag">@param</span> prefer 偏好 </div><div class="line"> * <span class="doctag">@Function</span>: 添加偏好拥有歌曲到 zset</div><div class="line"> * <span class="doctag">@param</span> singerOwnSongNamespace zset 键名</div><div class="line"> * <span class="doctag">@param</span> recommend 推荐歌曲信息</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addPreferMatchSongToZSet</span><span class="params">(String prefer, String preferMatchSongNamespace, Recommend recommend)</span> </span>&#123;</div><div class="line"><span class="keyword">long</span> result = redisCluster.SORTSET.zadd(preferMatchSongNamespace, Double.parseDouble(recommend.getSort()), recommend.getSongId());</div><div class="line">logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt; 将偏好：*"</span> + prefer + <span class="string">"* 下的歌曲："</span> + recommend.getSongId() + <span class="string">" 添加到 zset，操作key： "</span> + preferMatchSongNamespace + <span class="string">" 同步结果："</span> + result);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>这样我们就可以既把数据分离，又可以找到对应关系了。客户端在调用接口的时候，先根据用户号码找到，号码下的歌曲分类，然后根据分类找到分类下的歌曲信息，最后根据客户端需要的条数按照不同类型对应的比例取数据返回。这里还有还有一个问题是不同类型下可能会存在同一首歌曲的情况，所以在取出数据之后还需要过滤下重复数据。</p></blockquote><h4 id="管理所有关联关系已经数据"><a href="#管理所有关联关系已经数据" class="headerlink" title="管理所有关联关系已经数据"></a>管理所有关联关系已经数据</h4><p>因为数据是每个月都需要进行更新的，所以为了方便清理数据，我们需要存储的所有数据都管理起来，因为数据存储在 redis，所以最好的办法就是把所有 key 管理清理，这样清理数据的时候只需用相同的命令就可以清理了。redisCluster.KEYS.del(namespace);</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ojirj5wkr.bkt.clouddn.com/jbg.jpg&quot; alt=&quot;jbg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;好久没有更博了，这篇文章前段时间就应该记录的，无赖最近新项目加班太多，回到家已累成狗。实在不想动了，今天趁着要修改点东西回顾下之前处理逻辑记录下。其实感觉很多东西不用，不回顾很容易就忘记了。干我们这行更是这样。个人觉得经常记录写工作实践中遇到过的一些有意义的经历很有必要。说不定哪天就要你回来增加或者修改需求了呢。就像我现在这样的。这是一次工作中产品提的需求，自己的一次开发经历。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="杂记" scheme="http://alexpdh.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="工作实践" scheme="http://alexpdh.com/tags/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>基于 springMVC 的 RESTful HTTP API 实践（服务端）</title>
    <link href="http://alexpdh.com/2017/06/26/springMVC-restful-api/"/>
    <id>http://alexpdh.com/2017/06/26/springMVC-restful-api/</id>
    <published>2017-06-26T14:25:18.000Z</published>
    <updated>2017-09-26T09:51:40.888Z</updated>
    
    <content type="html"><![CDATA[<h4 id="理解-REST"><a href="#理解-REST" class="headerlink" title="理解 REST"></a>理解 REST</h4><p><strong>REST（Representational State Transfer）</strong>,中文翻译叫“表述性状态转移”。是 <a href="https://en.wikipedia.org/wiki/Roy_Fielding" target="_blank" rel="external"><span style="color:blue;font-size:15px;font-family:Microsoft YaHei;font-style:oblique;">Roy Thomas Fielding</span></a>  在他2000年的<a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" target="_blank" rel="external">博士论文</a>中提出的。它与传统的 SOAP Web 服务区别在于，REST关注的是要处理的数据，而 SOAP 主要关注行为和处理。要理解好 REST，根据其首字母拆分出的英文更容易理解。<br><strong>表述性（Representational）:</strong>对于 REST 来说，我们网络上的一个个URI资源可以用各种形式来表述，例如：XML、JSON或者HTML等。<br><strong>状态（State）：</strong>REST 更关注资源的状态而不是对资源采取的行为。<br><strong>转移（Transfer）：</strong>在网络传输过程中，REST 使资源以某种表述性形式从一个应用转移到另一个应用（如从服务端转移到客户端）。</p><blockquote><p>具体来说，REST 中存在行为，它的行为是通过 HTTP 表示操作的方法来定义的即：GET、POST、PUT、DELETE、PATCH；GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源，PATCH用来更新资源。 基于 REST 这样的观点，我们需要避免使用 REST服务、REST Web服务 这样的称呼，这些称呼多少都带有一些强调行为的味道。<br><a id="more"></a></p></blockquote><hr><h4 id="使用-RESTful-架构设计使用误区"><a href="#使用-RESTful-架构设计使用误区" class="headerlink" title="使用 RESTful 架构设计使用误区"></a>使用 RESTful 架构设计使用误区</h4><p><strong>RESTful 架构：</strong>是基于 REST 思想的时下比较流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p><ul><li>在没有足够了解 REST 的时候，我们很容易错误的将其视为 “基于 URL 的 Web 服务”，即将 REST 和 SOAP 一样，是一种远程过程调用（remote procedure call，RPC）的机制。但是 REST 和 RPC 几乎没有任何关系，RPC 是面向服务的，而 REST 是面向资源的，强调描述应用程序的事物和名词。这样很容易导致的一个结果是我们在设计 RESTful API 时，在 URI 中使用动词。例如：GET /user/getUser/123。正确写法应该是 GET /user/123。</li></ul><hr><h4 id="使用-springMVC-支持-RESTful"><a href="#使用-springMVC-支持-RESTful" class="headerlink" title="使用 springMVC 支持 RESTful"></a>使用 springMVC 支持 RESTful</h4><p>在 spring 3.0 以后，spring 这对 springMVC 的一些增强功能对 RESTful 提供了良好的支持。在4.0后的版本中，spring 支持一下方式创建 REST 资源：</p><ol><li>控制器可以处理所有的 HTTP 方法，包含几个主要的 REST 方法：GET、POST、PUT、DELETE、PATCH；</li><li>借助 @PathVariable 注解，控制器能够处理参数化的 URL（将变量输入作为 URL 的一部分）；</li><li>借助 spring 的视图解析器，资源能够以多种方式进行表述，包括将模型数据渲染为 XML、JSON、Atom、已经 RSS 的 View 实现；</li><li>可以使用 ContentNegotiatingViewResolver 来选择最适合客户端的表述；</li><li>借助 @ResponseBody 注解和各种 HttpMethodConverter 实现，能够替换基于视图的渲染方式；</li><li>类似地，@RequestBody 注解以及 HttpMethodConverter 实现可以将传入的 HTTP 数据转化为传入控制器处理方法的 Java 对象；</li><li>借助 RestTemplate ，spring 应用能够方便地使用 REST 资源。</li></ol><h4 id="创建-RESTful-控制器"><a href="#创建-RESTful-控制器" class="headerlink" title="创建 RESTful 控制器"></a>创建 RESTful 控制器</h4><p>代码清单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.pengdh.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.pengdh.entity.EmployeeEntity;</div><div class="line"><span class="keyword">import</span> com.pengdh.service.EmployeeService;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-06-27 0:08</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/employs"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> EmployeeService empService;</div><div class="line"></div><div class="line">  <span class="meta">@GetMapping</span>(value = <span class="string">"/list"</span>, produces = &#123; <span class="string">"application/json;charset=UTF-8"</span> &#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;EmployeeEntity&gt; <span class="title">employs</span><span class="params">(Integer offset,Integer limit)</span> </span>&#123;</div><div class="line">    offset = offset == <span class="keyword">null</span> ? <span class="number">0</span> : offset;</div><div class="line">    limit = limit == <span class="keyword">null</span> ? <span class="number">20</span> : limit;</div><div class="line">    <span class="keyword">return</span> empService.queryEmployList(offset,limit);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代码的大致过程是当客户端发起对 “/employs” 的 GET 请求时，将调用服务端的 employs 方法，服务端通过注入的 EmployeeService 获取到一个 EmployeeEntity 列表，并将列表以 JSON 的表述形式返回给客户端。</p><ul><li>需要注意的是这里控制器本身并不关心资源如何表述。控制器以 Java 对象的方式来处理资源。控制器完成了它的工作以后，资源才会被转化成为适合客户端的形式。spring 提供了两种方法将资源的 java 表述形式转化为发送给客户端的表述形式：<ul><li>内容协商（Content negotiation）：选择一个视图，它能够将模型渲染为呈现给客户端的表述形式；</li><li>消息转化器（Message conversion）：通过一个消息转换器将控制器所返回的对象转换为呈现给客户端的表述形式。</li></ul></li></ul><blockquote><p>对于上述两种方式，第一种方式是通过 ContentNegotiatingViewResolver 作为 ViewResolver 的实现，主要是用于将资源渲染人类用户接口所需要的视图模型，如：HTML、JSP等也可以渲染。也可以针对不是人类客户端产生 JSON 或 XML，但是效果不是很理想，往往会产生一些不是客户端所需要的预期结果。如：客户端希望得到的响应可能是：{“name”:”zhangs”,”age”:”20”}。而模型是 key-value 组成的 map ，可能最终的响应是这样的：{“user”:{“name”:”zhangs”,”age”:”20”}}。基于内容协商的这些限制，这里我们主要讨论第二种方式：使用 Spring 的消息转换功能来生成资源表述。</p></blockquote><hr><h4 id="使用-HTTP-消息转换器"><a href="#使用-HTTP-消息转换器" class="headerlink" title="使用 HTTP 消息转换器"></a>使用 HTTP 消息转换器</h4><p>这是一种更为直接的方式，消息转换器能够将控制器产生的数据转换为服务于客户端的表述形式。常用的一些消息转换器如：Jackson 的 MappingJacksonHttpMessageConverter 实现 JSON 消息和 Java 对象的互相转换； JAXB 库的 Jaxb2RootElementHttpMessageConverter 实现 XML 和 Java 对象的相互转换等。</p><h5 id="通过-ResponseBody-注解实现响应体中返回资源状态。"><a href="#通过-ResponseBody-注解实现响应体中返回资源状态。" class="headerlink" title="通过 @ResponseBody 注解实现响应体中返回资源状态。"></a>通过 @ResponseBody 注解实现响应体中返回资源状态。</h5><p>正常情况下，当处理方法返回 Java 对象时，这个对象会放在模型中并在视图中渲染使用。但是，如果使用了消息转换功能的话，我们需要告诉 Spring 跳过正常的模型/视图流程，并使用消息转换器。实现这种方式最简单的方式是在控制器的方法上添加 @ResponseBody 注解。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/list"</span>, produces = &#123; <span class="string">"application/json;charset=UTF-8"</span> &#125;)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;EmployeeEntity&gt; <span class="title">employs</span><span class="params">(Integer offset,Integer limit)</span> </span>&#123;</div><div class="line">  offset = offset == <span class="keyword">null</span> ? <span class="number">0</span> : offset;</div><div class="line">  limit = limit == <span class="keyword">null</span> ? <span class="number">20</span> : limit;</div><div class="line">  <span class="keyword">return</span> empService.queryEmployList(offset,limit);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里 @ResponseBody 注解会告知 Spring 将 List<employeeentity> 转换成 JSON 这样的表述形式作为资源发送给客户端。</employeeentity></p><h5 id="使用-RequestBody-注解实现在请求体中接收资源状态"><a href="#使用-RequestBody-注解实现在请求体中接收资源状态" class="headerlink" title="使用 @RequestBody 注解实现在请求体中接收资源状态"></a>使用 @RequestBody 注解实现在请求体中接收资源状态</h5><p>使用 @RequestBody 注解可以告知 Spring 查找一个消息转换器，将来自客户端的资源表述转换为对象。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/employ"</span>, produces = &#123; <span class="string">"application/json;charset=UTF-8"</span> &#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveEmploy</span><span class="params">(@RequestBody EmployeeEntity employeeEntity)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> empService.save(employeeEntity);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="使用-RestController-注解为控制器默认设置消息转换"><a href="#使用-RestController-注解为控制器默认设置消息转换" class="headerlink" title="使用 @RestController 注解为控制器默认设置消息转换"></a>使用 @RestController 注解为控制器默认设置消息转换</h5><p>Spring 4.0 引入了 @RestController 注解，在控制器是用 @RestController 代替 @Controller 的话，Spring 将会为该控制器的所有处理方法应用消息转换功能。我们不必在每个方法都添加 @ResponseBody 注解了。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.pengdh.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.pengdh.entity.EmployeeEntity;</div><div class="line"><span class="keyword">import</span> com.pengdh.service.EmployeeService;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-06-27 0:08</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/employs"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> EmployeeService empService;</div><div class="line"></div><div class="line">  <span class="meta">@GetMapping</span>(value = <span class="string">"/list"</span>, produces = &#123; <span class="string">"application/json;charset=UTF-8"</span> &#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;EmployeeEntity&gt; <span class="title">employs</span><span class="params">(Integer offset,Integer limit)</span> </span>&#123;</div><div class="line">    offset = offset == <span class="keyword">null</span> ? <span class="number">0</span> : offset;</div><div class="line">    limit = limit == <span class="keyword">null</span> ? <span class="number">20</span> : limit;</div><div class="line">    <span class="keyword">return</span> empService.queryEmployList(offset,limit);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@PostMapping</span>(value = <span class="string">"/employ"</span>, produces = &#123; <span class="string">"application/json;charset=UTF-8"</span> &#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveEmploy</span><span class="params">(@RequestBody EmployeeEntity employeeEntity)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> empService.save(employeeEntity);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="为客户端提供其他元数据"><a href="#为客户端提供其他元数据" class="headerlink" title="为客户端提供其他元数据"></a>为客户端提供其他元数据</h4><h5 id="使用-ResponseEntity-提供更多响应相关的元数据"><a href="#使用-ResponseEntity-提供更多响应相关的元数据" class="headerlink" title="使用 ResponseEntity 提供更多响应相关的元数据"></a>使用 ResponseEntity 提供更多响应相关的元数据</h5><p><strong>可以利用 ResponseEntity 给客户端返回状态码、设置响应头信息等，如给客户端提供返回码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, produces = &#123; <span class="string">"application/json;charset=UTF-8"</span> &#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;EmployeeEntity&gt; <span class="title">employById</span><span class="params">(@PathVariable <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">  HttpStatus status = <span class="keyword">null</span>;</div><div class="line">  EmployeeEntity employeeEntity = empService.selectById(id);</div><div class="line">  <span class="keyword">if</span> (employeeEntity != <span class="keyword">null</span>) &#123;</div><div class="line">    status = HttpStatus.OK;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    status = HttpStatus.NOT_FOUND;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;EmployeeEntity&gt;(employeeEntity, status);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>如果没有 if 判断，当根据 id 找不到对应的信息的时候，返回给客户端的状态码是默认的 HttpStatus.OK；当加上了判断条件后如果没有相应的信息返回则设置返回状态码为 HttpStatus.NOT_FOUND，最后通过 new 一个 ResponseEntity 会将查询信息和状态码一起返回到客户端。</p></blockquote><ul><li>另外，ResponseEntity 还包含有 @ResponseBody 的语义，上面示例中并没有使用 @ResponseBody 注解，但是 ResponseEntity 的负载部分同样可以渲染到响应体中。</li></ul><h5 id="使用控制器异常处理器-ExceptionHandler-处理异常信息"><a href="#使用控制器异常处理器-ExceptionHandler-处理异常信息" class="headerlink" title="使用控制器异常处理器 @ExceptionHandler 处理异常信息"></a>使用控制器异常处理器 @ExceptionHandler 处理异常信息</h5><p>@ExceptionHandler 可以用到控制器的方法中，处理特定的异常：</p><p><strong>创建响应包装类 ResponseResult</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.pengdh.dto;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 响应结果封装类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-06-29 0:34</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResult</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3371934618173052904L</span>;</div><div class="line">  <span class="keyword">private</span> String code;</div><div class="line">  <span class="keyword">private</span> String desc;</div><div class="line">  <span class="keyword">private</span> T data;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">()</span> </span>&#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">(String code, String desc)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.code = code;</div><div class="line">    <span class="keyword">this</span>.desc = desc;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ResponseResult</span><span class="params">(String code, T data)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.code = code;</div><div class="line">    <span class="keyword">this</span>.data = data;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> code;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.code = code;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> desc;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.desc = desc;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.data = data;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"ResponseResult&#123;"</span> +</div><div class="line">        <span class="string">"code='"</span> + code + <span class="string">'\''</span> +</div><div class="line">        <span class="string">", desc='"</span> + desc + <span class="string">'\''</span> +</div><div class="line">        <span class="string">", data="</span> + data +</div><div class="line">        <span class="string">'&#125;'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>创建一个异常类 ResourceNotFoundException</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.pengdh.exception;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 资源未找到异常</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-06-29 0:55</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceNotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4880328265878141724L</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ResourceNotFoundException</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ResourceNotFoundException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(message);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ResourceNotFoundException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(message, cause);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>控制器 EmployeeController </strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.pengdh.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.pengdh.dto.ResponseResult;</div><div class="line"><span class="keyword">import</span> com.pengdh.entity.EmployeeEntity;</div><div class="line"><span class="keyword">import</span> com.pengdh.exception.ResourceNotFound;</div><div class="line"><span class="keyword">import</span> com.pengdh.service.EmployeeService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-06-27 0:08</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/employs"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> EmployeeService empService;</div><div class="line"></div><div class="line">  <span class="meta">@GetMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, produces = &#123; <span class="string">"application/json;charset=UTF-8"</span> &#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> ResponseResult&lt;EmployeeEntity&gt; <span class="title">employById</span><span class="params">(@PathVariable <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">    ResponseResult&lt;EmployeeEntity&gt; result = <span class="keyword">new</span> ResponseResult&lt;EmployeeEntity&gt;();</div><div class="line">    HttpStatus status = <span class="keyword">null</span>;</div><div class="line">    EmployeeEntity employeeEntity = empService.selectById(id);</div><div class="line">    <span class="keyword">if</span> (employeeEntity == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ResourceNotFoundException(String.valueOf(id));</div><div class="line">    &#125;</div><div class="line">    result.setCode(String.valueOf(HttpStatus.OK));</div><div class="line">    result.setData(employeeEntity);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@ExceptionHandler</span>(ResourceNotFoundException.class)</div><div class="line">  <span class="function"><span class="keyword">public</span> ResponseResult&lt;Object&gt; <span class="title">handlerException</span><span class="params">(ResourceNotFoundException e)</span> </span>&#123;</div><div class="line">    ResponseResult&lt;Object&gt; result = <span class="keyword">new</span> ResponseResult&lt;Object&gt;();</div><div class="line">    result.setCode(String.valueOf(HttpStatus.NOT_FOUND));</div><div class="line">    result.setDesc(e.getMessage());</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>从控制器代码可以看出，我们通过 @ExceptionHandler 能将控制器的方法的异常场景分出来单独处理。</p></blockquote><hr><h5 id="使用-RestControllerAdvice-捕获所有-controller-抛出的异常"><a href="#使用-RestControllerAdvice-捕获所有-controller-抛出的异常" class="headerlink" title="使用 @RestControllerAdvice 捕获所有 controller 抛出的异常"></a>使用 @RestControllerAdvice 捕获所有 controller 抛出的异常</h5><p>@ ControllerAdvice是一个@ Component，用于定义@ ExceptionHandler的，@InitBinder和@ModelAttribute方法，适用于所有使用@ RequestMapping方法。 </p><p><strong>新建一个异常处理类 GlobalExceptionHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.pengdh.exception;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.pengdh.dto.ResponseResult;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 全局异常处理器</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-07-11 0:00</div><div class="line"> */</div><div class="line"><span class="meta">@RestControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</div><div class="line">  <span class="meta">@ExceptionHandler</span>(ResourceNotFoundException.class)</div><div class="line">  <span class="meta">@ResponseStatus</span>(HttpStatus.INTERNAL_SERVER_ERROR)</div><div class="line">  <span class="function"><span class="keyword">public</span> ResponseResult&lt;Object&gt; <span class="title">handlerException</span><span class="params">(ResourceNotFoundException e)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseResult&lt;Object&gt;(String.valueOf(HttpStatus.NOT_FOUND), e.getMessage());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>控制器 EmployeeController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">package</span> com.pengdh.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.pengdh.dto.ResponseResult;</div><div class="line"><span class="keyword">import</span> com.pengdh.entity.EmployeeEntity;</div><div class="line"><span class="keyword">import</span> com.pengdh.exception.ResourceNotFoundException;</div><div class="line"><span class="keyword">import</span> com.pengdh.service.EmployeeService;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> pengdh</div><div class="line"> * <span class="doctag">@date</span>: 2017-06-27 0:08</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/employs"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> EmployeeService empService;</div><div class="line"></div><div class="line">  <span class="meta">@GetMapping</span>(value = <span class="string">"/list"</span>, produces = &#123; <span class="string">"application/json;charset=UTF-8"</span> &#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;EmployeeEntity&gt; <span class="title">employs</span><span class="params">(Integer offset,Integer limit)</span> </span>&#123;</div><div class="line">    offset = offset == <span class="keyword">null</span> ? <span class="number">0</span> : offset;</div><div class="line">    limit = limit == <span class="keyword">null</span> ? <span class="number">20</span> : limit;</div><div class="line">    <span class="keyword">return</span> empService.queryEmployList(offset,limit);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@PostMapping</span>(value = <span class="string">"/employ"</span>, produces = &#123; <span class="string">"application/json;charset=UTF-8"</span> &#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saveEmploy</span><span class="params">(@RequestBody EmployeeEntity employeeEntity)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> empService.save(employeeEntity);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@GetMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, produces = &#123; <span class="string">"application/json;charset=UTF-8"</span> &#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> ResponseResult&lt;EmployeeEntity&gt; <span class="title">employById</span><span class="params">(@PathVariable <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">    ResponseResult&lt;EmployeeEntity&gt; result = <span class="keyword">new</span> ResponseResult&lt;EmployeeEntity&gt;();</div><div class="line">    HttpStatus status = <span class="keyword">null</span>;</div><div class="line">    EmployeeEntity employeeEntity = empService.selectById(id);</div><div class="line">    <span class="keyword">if</span> (employeeEntity == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ResourceNotFoundException(String.valueOf(id));</div><div class="line">    &#125;</div><div class="line">    result.setCode(String.valueOf(HttpStatus.OK));</div><div class="line">    result.setData(employeeEntity);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>从代码可以看出，我们将 controller 中的异常方法移到了一个新增的异常处理类。这样，如果其他 controller 类也抛出 ResourceNotFoundException 异常的时候，就会被 GlobalExceptionHandler 捕获。</p></blockquote><hr><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><ul><li><a href="https://www.manning.com/books/spring-in-action-fourth-edition" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">Spring in action</span></a></li><li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">理解RESTful架构</span></a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">RESTful API 设计指南</span></a></li><li><a href="http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/08/17/Restful%20API%20%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">Restful API 的设计规范</span></a></li><li><a href="https://github.com/cocoajin/http-api-design-ZH_CN#%E8%BF%94%E5%9B%9E%E5%90%88%E9%80%82%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">HTTP API 设计指南</span></a></li><li><a href="http://www.cnblogs.com/moonz-wu/p/4211626.html" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">好RESTful API的设计原则</span></a></li><li><a href="http://blog.jobbole.com/41233/" target="_blank" rel="external"><span style="color:blue;font-size:14px;font-family:Microsoft YaHei;font-style:oblique;">RESTful API 设计最佳实践</span></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;理解-REST&quot;&gt;&lt;a href=&quot;#理解-REST&quot; class=&quot;headerlink&quot; title=&quot;理解 REST&quot;&gt;&lt;/a&gt;理解 REST&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;REST（Representational State Transfer）&lt;/strong&gt;,中文翻译叫“表述性状态转移”。是 &lt;a href=&quot;https://en.wikipedia.org/wiki/Roy_Fielding&quot;&gt;&lt;span style=&quot;color:blue;font-size:15px;font-family:Microsoft YaHei;font-style:oblique;&quot;&gt;Roy Thomas Fielding&lt;/span&gt;&lt;/a&gt;  在他2000年的&lt;a href=&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm&quot;&gt;博士论文&lt;/a&gt;中提出的。它与传统的 SOAP Web 服务区别在于，REST关注的是要处理的数据，而 SOAP 主要关注行为和处理。要理解好 REST，根据其首字母拆分出的英文更容易理解。&lt;br&gt;&lt;strong&gt;表述性（Representational）:&lt;/strong&gt;对于 REST 来说，我们网络上的一个个URI资源可以用各种形式来表述，例如：XML、JSON或者HTML等。&lt;br&gt;&lt;strong&gt;状态（State）：&lt;/strong&gt;REST 更关注资源的状态而不是对资源采取的行为。&lt;br&gt;&lt;strong&gt;转移（Transfer）：&lt;/strong&gt;在网络传输过程中，REST 使资源以某种表述性形式从一个应用转移到另一个应用（如从服务端转移到客户端）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;具体来说，REST 中存在行为，它的行为是通过 HTTP 表示操作的方法来定义的即：GET、POST、PUT、DELETE、PATCH；GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源，PATCH用来更新资源。 基于 REST 这样的观点，我们需要避免使用 REST服务、REST Web服务 这样的称呼，这些称呼多少都带有一些强调行为的味道。&lt;br&gt;
    
    </summary>
    
      <category term="编程技术" scheme="http://alexpdh.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="springMVC" scheme="http://alexpdh.com/tags/springMVC/"/>
    
      <category term="restful" scheme="http://alexpdh.com/tags/restful/"/>
    
  </entry>
  
</feed>
